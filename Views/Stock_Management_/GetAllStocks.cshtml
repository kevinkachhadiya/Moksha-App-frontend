@using System.Collections
@model Moksha_App.Models.stockListViewModel
@{
    var successMessage = TempData["Success"] as string;
    var deleteMessage = TempData["Delete"] as string;
    var modifyMessage = TempData["modify"] as string;
    ViewData["Title"] = "GetAllStocks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
        document.body.appendChild(globalAlertContainer);
        showAlert("✅ @successMessage", "success");
        });
    </script>
}
@if (!string.IsNullOrEmpty(deleteMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
        document.body.appendChild(globalAlertContainer);
        showAlert("❌ @deleteMessage", "danger");
        });
    </script>
}
@if (!string.IsNullOrEmpty(modifyMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
        document.body.appendChild(globalAlertContainer);
        showAlert("⚠️ @modifyMessage", "warning");
        });
    </script>
}
@if (ViewBag.Error != null)
{
    <p style="color:red">@ViewBag.Error</p>
}

<style>
    /* Header and accent bar styling */
    .accent-bar {
        height: 5px;
        background: linear-gradient(90deg, #4e73df 0%, #36b9cc 100%);
        border-radius: 5px 5px 0 0;
    }

    .header-container {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border-radius: 5px;
    }

    .icon-container {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 10px;
        background-color: rgba(78, 115, 223, 0.1);
    }

        .icon-container i {
            font-size: 1.5rem;
        }

    /* Button styling */
    .add-stock-btn {
        background-color: #4e73df;
        border: none;
        transition: all 0.3s;
    }

        .add-stock-btn:hover {
            background-color: #2e59d9;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }

    /* Modal styling */
    .modal-header {
        background: linear-gradient(90deg, #4e73df 0%, #36b9cc 100%);
        color: white;
        border-radius: 5px 5px 0 0;
    }

    .form-control:focus {
        border-color: #4e73df;
        box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }

    .modal-footer {
        border-top: none;
    }

    /* Calculator preview */
    .calc-preview {
        font-size: 14px;
        color: #6c757d;
        font-style: italic;
    }

    /* Validation */
    .is-invalid {
        border-color: #e74a3b !important;
    }

    .invalid-feedback {
        display: none;
        color: #e74a3b;
        font-size: 80%;
    }

    /* Responsive adjustments */
    @@media (max-width: 576px) {
        .add-stock-btn span {
            display: none;
        }

        .add-stock-btn i {
            margin-right: 0 !important;
        }
    }

    /* Stock table styling */
    .stock-table {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

        .stock-table thead {
            background-color: #f8f9fc;
        }

        .stock-table th {
            border-top: none;
            font-weight: 600;
            color: #5a5c69;
        }

    .stock-item-row {
        transition: background-color 0.2s;
    }

        .stock-item-row:hover {
            background-color: #f8f9fc;
        }

    .accent-bar {
        height: 4px;
        background: linear-gradient(90deg, #4e73df, #36b9cc);
        border-radius: 3px 3px 0 0;
    }

    .stock-card {
        transition: transform 0.2s, box-shadow 0.2s;
        height: 100%;
    }

        .stock-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
        }

    .stock-available {
        font-size: 2rem;
        font-weight: 700;
    }

    .stock-weight {
        font-size: 1.1rem;
    }

    .avatar-circle {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .action-btn {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

<div class="container-fluid vh-100 d-flex flex-column pb-1">
    <!-- Header Section -->
    <div class="header-container mb-1">
        <!-- Decorative top accent bar -->
        <div class="accent-bar"></div>
        <!-- Main header content -->
        <div class="d-flex justify-content-between align-items-center p-2 bg-white rounded-lg shadow-sm position-relative">
            <!-- Left side with title and breadcrumb -->
            <div class="d-flex flex-column">
                <div class="d-flex align-items-center mb-1">
                    <div class="icon-container me-3">
                        <i class="bi bi-box-seam text-primary"></i>
                    </div>
                    <h2 class="text-primary fw-bold mb-0">Stock Management</h2>
                </div>
            </div>
            <!-- Right side with action button -->
            <button class="btn btn-primary d-flex align-items-center px-2 py-2 shadow-sm add-stock-btn"
                    onclick="addStock()">
                <i class="bi bi-plus-circle me-2"></i>
                <span>Add New Stock</span>
            </button>
        </div>
    </div>

    <!-- Stock listing will go here -->
    <div class="search-filter-container mb-1">
        <div class="card shadow-sm border-0">
            <div class="card-body p-0">
                <form id="searchForm" method="get" asp-action="GetAllStocks">
                    <div class="d-flex flex-column flex-lg-row p-3 gap-3">
                        <!-- Search Field with Icon -->
                        <div class="search-wrapper flex-grow-1 position-relative">
                            <div class="position-relative d-flex align-items-end h-100">
                                <!-- Search Icon -->
                                <i class="bi bi-search text-muted position-absolute ms-3" style="z-index: 2;margin-bottom: 10px;"></i>

                                <!-- Search Input -->
                                <input type="text"
                                       name="searchTerm"
                                       class="form-control ps-5 pe-5 shadow-sm"
                                       placeholder="Search stocks by material name, stock ID, or quantity..."
                                       value=""
                                       style="border-radius: 8px; height: 50px;">

                                @if (!string.IsNullOrEmpty(Context.Request.Query["searchTerm"]))
                                {
                                    <button type="button"
                                            class="btn position-absolute end-0 me-2 p-0"
                                            style="background: transparent; border: none; z-index: 2; margin-bottom: 10px;"
                                            onclick="clearSearch()"
                                            aria-label="Clear search">
                                        <i class="bi bi-x-circle text-muted fs-5"></i>
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Filters Group -->
                        <div class="filters-group d-flex flex-column flex-md-row align-items-stretch gap-3">
                            <!-- Sort By Dropdown -->
                            <div class="dropdown-wrapper position-relative">
                                <label for="sortColumn" class="form-label text-muted small mb-1 d-none d-sm-block">Sort By</label>
                                <div class="select-container position-relative">
                                    <select id="sortColumn" name="sortColumn" class="form-select shadow-sm" style="border-radius: 6px; padding-right: 2rem;">
                                        <option value="MaterialName" selected="@(Context.Request.Query["sortColumn"] == "ColorName")">Material Name</option>
                                        <option value="AvailableStock" selected="@(Context.Request.Query["sortColumn"] == "AvailableStock")">Available Stock</option>
                                        <option value="TotalBags" selected="@(Context.Request.Query["sortColumn"] == "TotalBags")">Total Bags</option>
                                        <option value="Weight" selected="@(Context.Request.Query["sortColumn"] == "Weight")">Weight per Bag</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Sort Direction Dropdown -->
                            <div class="dropdown-wrapper position-relative">
                                <label for="sortDirection" class="form-label text-muted small mb-1 d-none d-sm-block">Order</label>
                                <div class="select-container position-relative">
                                    <select id="sortDirection" name="sortDirection" class="form-select shadow-sm" style="border-radius: 6px; padding-right: 2rem;">
                                        <option value="asc" selected="@(Context.Request.Query["sortDirection"] == "asc")">Ascending</option>
                                        <option value="desc" selected="@(Context.Request.Query["sortDirection"] == "desc")">Descending</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="action-buttons d-flex align-items-end gap-2 ms-md-auto">
                                <button type="submit" class="btn btn-primary px-4 shadow-sm" style="border-radius: 6px;">
                                    <i class="bi bi-filter me-2"></i>Apply
                                </button>
                                <a href="#" class="btn btn-outline-secondary shadow-sm" style="border-radius: 6px;">
                                    <i href="@Url.Action("GetAllStocks")" class="bi bi-arrow-counterclockwise me-1"></i>Reset
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Advanced Filters Toggle -->
                    <div class="d-flex justify-content-center border-top">
                        <button type="button" class="btn btn-link text-primary px-4 py-2" onclick="toggleAdvancedFilters()" aria-expanded="false" aria-controls="advancedFilters">
                            <span id="advancedFiltersText">Advanced Filters</span>
                            <i class="bi bi-chevron-down ms-1" id="advancedFiltersIcon"></i>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Stock Cards Container -->
    <div class="stock-cards-container mb-4 flex-grow-1 overflow-auto">
        <div class="card shadow-sm border-0">
            <!-- Cards Header with Stats and Actions -->
            <div class="card-header bg-white p-2 border-bottom">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                        <!-- Left side with title and count -->
                        <div class="d-flex align-items-center gap-2">
                            <h5 class="text-nowrap mb-0 fw-semibold me-2">All Stocks</h5>
                            <div class="badge rounded-pill bg-light text-primary border-primary px-2 py-1">
                                <span id="billCount">@(Model?.Stock.Count() ?? 0)</span>  records
                            </div>
                        </div>

                        <!-- Right side with action buttons -->
                        <div class="d-flex align-items-center gap-2 ms-auto">
                            <!-- Export dropdown -->
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        type="button"
                                        id="exportDropdown"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-download me-1"></i>Export
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="exportDropdown">
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-pdf me-1 text-danger"></i>PDF</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-excel me-1 text-success"></i>Excel</a></li>
                                </ul>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        type="button"
                                        id="pageSizeDropdown"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-list-ul me-1"></i><span id="currentPageSize">Context.Request.Query["pageSize"] ?? "10"</span> Records
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="pageSizeDropdown">
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(5)">5 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(10)">10 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(50)">50 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(100)">100 Records</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(0)">All Records</a></li>
                                </ul>
                            </div>


                            <!-- Refresh button -->
                            <button class="btn btn-sm btn-outline-secondary" id="refreshBtn" title="Refresh">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Cards Content -->
            <div class="card-body p-3">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-3">

                    @if (Model != null && Model.Stock.Any())
                    {

                        foreach (var stock in Model.Stock)
                        {
                            <!-- Stock Card -->
                            <div class="col">
                                <div class="card stock-card shadow-sm h-100">
                                    <div class="card-body p-3">
                                        <div class="d-flex justify-content-between align-items-start mb-3">
                                            <div class="d-flex align-items-center">
                                                @{
                                                    string initials = string.Join("", stock.ColorName?.Split(' ', StringSplitOptions.RemoveEmptyEntries).Take(2).Select(n => n[0])) ?? "--";
                                                }
                                                <div class="avatar-circle bg-primary-subtle text-primary me-2">
                                                    <span>@initials</span>
                                                </div>
                                                <div>
                                                    <h5 class="mb-0 fw-semibold">@stock.ColorName</h5>
                                                    <small class="text-secondary">ID: @stock.StockId</small>
                                                </div>
                                            </div>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-secondary rounded-circle action-btn" type="button" data-bs-toggle="dropdown">
                                                    <i class="bi bi-three-dots-vertical"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                                    <li>
                                                        <a class="dropdown-item" href="#" onclick="addStockQuantity(@stock.StockId)">
                                                            <i class="bi bi-plus-circle me-2 text-success"></i>Add Stock
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="#" onclick="editStock(@stock.StockId)">
                                                            <i class="bi bi-pencil-square me-2 text-primary"></i>Edit Stock
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item" href="#" onclick="removeStock(@stock.StockId)">
                                                            <i class="bi bi-dash-circle me-2 text-warning"></i>Remove Stock
                                                        </a>
                                                    </li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li>
                                                        <a class="dropdown-item text-danger" href="#" onclick="deleteStock(@stock.StockId)">
                                                            <i class="bi bi-trash me-2"></i>Delete Stock
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>

                                        <div class="text-center py-2">
                                            <div class="stock-available text-primary">@stock.TotalWeight</div>
                                            <div class="stock-weight text-muted">kg available</div>
                                        </div>

                                        <div class="d-flex justify-content-between mt-3">
                                            <div class="text-center">
                                                <div class="text-secondary fw-medium">@stock.TotalBags</div>
                                                <small class="text-muted">Total Bags</small>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-secondary fw-medium">@stock.Weight</div>
                                                <small class="text-muted">Kg/Bag</small>
                                            </div>
                                            <div class="text-center">
                                                <div class="badge bg-success-subtle text-success px-2 py-1">
                                                    <i class="bi bi-check-circle me-1"></i>@(stock.isActive ? "Active" : "Inactive")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        }
                    }
                    else
                    {


                        <!-- Sample Empty State Card (for when no stock exists) -->
                        <div class="col-12 d-none">
                            <div class="card shadow-sm h-100">
                                <div class="card-body py-5">
                                    <div class="text-center">
                                        <i class="bi bi-box-seam text-secondary" style="font-size: 3rem;"></i>
                                        <h4 class="mt-3">No Stock Items Found</h4>
                                        <p class="text-muted mb-4">There are no stock items matching your search criteria.</p>
                                        <button onclick="addStock()" class="btn btn-primary">
                                            <i class="bi bi-plus-circle me-1"></i>Add New Stock
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Table Footer with Pagination -->
            <div class="card-footer bg-white py-3 d-flex justify-content-between align-items-center border-top">
                <div class="text-muted">
                    Showing <span class="fw-semibold">12</span> of <span class="fw-semibold">12</span> items
                </div>

                <nav aria-label="Page navigation">
                    <ul class="pagination pagination-sm mb-0">
                        <!-- First Page -->
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="First">
                                <i class="bi bi-chevron-double-left"></i>
                            </a>
                        </li>

                        <!-- Previous Page -->
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <i class="bi bi-chevron-left"></i>
                            </a>
                        </li>

                        <!-- Page Numbers -->
                        <li class="page-item active">
                            <a class="page-link" href="#">1</a>
                        </li>

                        <!-- Next Page -->
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <i class="bi bi-chevron-right"></i>
                            </a>
                        </li>

                        <!-- Last Page -->
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Last">
                                <i class="bi bi-chevron-double-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Add Stock Modal -->
<div class="modal" id="addStockModal" tabindex="-1" aria-labelledby="addStockModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStockModalLabel">Add New Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="stockForm" novalidate>
                    <div class="mb-3">
                        <label for="materialId" class="form-label">Material</label>
                        <select class="form-select" id="materialId" required>
                            <option value="">Select Material</option>
                            <!-- Materials will be loaded here dynamically -->
                        </select>
                        <div class="invalid-feedback">
                            Please select a material.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="totalBags" class="form-label">Total Bags</label>
                        <input type="text" class="form-control" id="totalBags" placeholder="Enter quantity (e.g. 5+2)" required>
                        <div class="calc-preview" id="totalBagsPreview"></div>
                        <div class="invalid-feedback">
                            Please enter a valid number of bags.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="weightPerBag" class="form-label">Weight per Bag (kg)</label>
                        <input type="text" class="form-control" id="weightPerBag" placeholder="Enter weight (e.g. 50.5)" required>
                        <div class="calc-preview" id="weightPerBagPreview"></div>
                        <div class="invalid-feedback">
                            Please enter a valid weight (greater than 0).
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="totalWeight" class="form-label">Total Weight</label>
                        <input type="text" class="form-control" id="totalWeight" readonly>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveStockBtn">Save Stock</button>
            </div>
        </div>
    </div>
</div>

<!-- Add JavaScript for handling the modal and calculations -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.8.0/math.min.js"></script>
<script>
    // Function to open the Add Stock modal
    function addStock() {
        // Load materials from the server before opening the modal
        loadMaterials();
        // Open the modal
        var addStockModal = new bootstrap.Modal(document.getElementById('addStockModal'));
        addStockModal.show();

    }

        function loadMaterials() {
        const params = new URLSearchParams({
            searchTerm: '',
            sortColumn: 'ColorName',
            sortDirection: 'asc',
            page: '1',
            pageSize: '9999'
        });

        fetch('/Materials/All_Mt?' + params.toString())
            .then(response => {
                if (!response.ok) throw new Error('Failed to load materials');
                return response.json();
            })
            .then(data => {
                const materialSelect = document.getElementById('materialId');
                materialSelect.innerHTML = '<option value="">Select Material</option>';
                data.forEach(material => {
                    const option = document.createElement('option');
                    option.value = material.id;
                    option.textContent = material.colorName;
                    materialSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading materials:', error);
            });
    }

    // Initialize form event listeners when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        const totalBagsInput = document.getElementById('totalBags');
        const weightPerBagInput = document.getElementById('weightPerBag');
        const totalWeightInput = document.getElementById('totalWeight');
        const totalBagsPreview = document.getElementById('totalBagsPreview');
        const weightPerBagPreview = document.getElementById('weightPerBagPreview');
        const materialIdSelect = document.getElementById('materialId');
        const saveStockBtn = document.getElementById('saveStockBtn');
        const stockForm = document.getElementById('stockForm');

        // Validate and calculate totalBags
        totalBagsInput.addEventListener('input', function() {
            try {
                if (this.value.trim() === '') {
                    totalBagsPreview.textContent = '';
                    this.classList.add('is-invalid');
                    return;
                }

                const result = math.evaluate(this.value);
                if (isNaN(result) || result <= 0 || !Number.isInteger(result)) {
                    totalBagsPreview.textContent = 'Invalid expression';
                    this.classList.add('is-invalid');
                } else {
                    totalBagsPreview.textContent = `= ${result} bags`;
                    this.classList.remove('is-invalid');
                    calculateTotalWeight();
                }
            } catch (e) {
                totalBagsPreview.textContent = 'Invalid expression';
                this.classList.add('is-invalid');
            }
        });

        // Validate and calculate weightPerBag
        weightPerBagInput.addEventListener('input', function() {
            try {
                if (this.value.trim() === '') {
                    weightPerBagPreview.textContent = '';
                    this.classList.add('is-invalid');
                    return;
                }

                const result = math.evaluate(this.value);
                if (isNaN(result) || result <= 0) {
                    weightPerBagPreview.textContent = 'Invalid expression';
                    this.classList.add('is-invalid');
                } else {
                    weightPerBagPreview.textContent = `= ${result.toFixed(2)} kg`;
                    this.classList.remove('is-invalid');
                    calculateTotalWeight();
                }
            } catch (e) {
                weightPerBagPreview.textContent = 'Invalid expression';
                this.classList.add('is-invalid');
            }
        });

        // Material selection validation
        materialIdSelect.addEventListener('change', function() {
            if (this.value === '') {
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-invalid');
            }
        });

        // Calculate total weight
        function calculateTotalWeight() {
            try {
                const bagsValue = totalBagsInput.value.trim();
                const weightValue = weightPerBagInput.value.trim();

                if (bagsValue === '' || weightValue === '') {
                    totalWeightInput.value = '';
                    return;
                }

                const bags = math.evaluate(bagsValue);
                const weight = math.evaluate(weightValue);

                if (!isNaN(bags) && !isNaN(weight) && bags > 0 && weight > 0) {
                    const totalWeight = bags * weight;
                    totalWeightInput.value = totalWeight.toFixed(2);
                } else {
                    totalWeightInput.value = '';
                }
            } catch (e) {
                totalWeightInput.value = '';
            }
        }

        // Form submission
        saveStockBtn.addEventListener('click', function() {
            // Validate all inputs
            let isValid = true;

            if (materialIdSelect.value === '') {
                materialIdSelect.classList.add('is-invalid');
                isValid = false;
            }

            try {
                const bags = math.evaluate(totalBagsInput.value);
                if (isNaN(bags) || bags <= 0 || !Number.isInteger(bags)) {
                    totalBagsInput.classList.add('is-invalid');
                    isValid = false;
                }
            } catch (e) {
                totalBagsInput.classList.add('is-invalid');
                isValid = false;
            }

            try {
                const weight = math.evaluate(weightPerBagInput.value);
                if (isNaN(weight) || weight <= 0) {
                    weightPerBagInput.classList.add('is-invalid');
                    isValid = false;
                }
            } catch (e) {
                weightPerBagInput.classList.add('is-invalid');
                isValid = false;
            }

            if (isValid) {
                // Prepare data for submission
                const stockData = {
                  MaterialId: parseInt(materialIdSelect.value),
                  TotalBags: math.evaluate(totalBagsInput.value),
                  Weight: math.evaluate(weightPerBagInput.value),
                  isActive: true // Required by your model, make sure you send it
                };
                saveStock(stockData);
            }
        });

        // Function to save stock data
        function saveStock(stockData) {
            // AJAX call to save stock data


            fetch('/Stock_Management_/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(stockData)
            })
            .then( async response => {
                  const data = await response.json();

                 if (response.ok && data.success)
                 {
                   bootstrap.Modal.getInstance(document.getElementById('addStockModal')).hide();
                   setTimeout(() => {
                   window.location.reload();
                   }, 100);
                 }
                 else
                 {
                     showAlert(data.message || "An error occurred", "danger", 3000);
                  }
                  })
            .catch(error => {
                    showAlert(error.toString(),"danger", 1000);
                 });
        }
    });
</script>

                < link rel = "stylesheet" href = "~/css/site.css" />