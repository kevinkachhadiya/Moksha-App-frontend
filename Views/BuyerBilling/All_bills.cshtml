@model Moksha_App.Models.BillListViewModel
@{
    ViewData["Title"] = "All_bills";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .suggestions-dropdown {
        position: absolute;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        background-color: white;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        z-index: 1000;
        display: none;
        margin-top: 2px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .suggestion-item {
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f0f0f0;
    }

        .suggestion-item:hover {
            background-color: #f8f9fa;
        }

    .suggestion-name {
        font-weight: 600;
    }

    .suggestion-phone {
        font-size: 0.85rem;
        color: #6c757d;
    }
</style>
<div class="m-3">
    <!-- Header Section -->
    <div class="mb-2">
        <!-- Decorative top accent bar -->
        <div class=""></div>

        <!-- Main header content -->
        <div class="d-flex justify-content-between align-items-center">
            <!-- Left side with title and breadcrumb -->
            <div class="d-flex flex-column">
                <div class="d-flex align-items-center mb-2">
                    <div class="icon-container me-3">
                        <i class="bi bi-receipt-cutoff text-primary"></i>
                    </div>
                    <h2 class="text-primary fw-bold mb-0">Supplier Billing Management</h2>
                </div>
            </div>
            <!-- Right side with action button -->
            <button class="btn btn-primary rounded-pill shadow-sm add-bill-btn"
                    onclick="addbill()">
                <i class="bi bi-plus-circle me-2 ms-1"></i>
                <span>Add Supplier Bill</span>
            </button>

        </div>
    </div>
    <div class="search-filter-container mb-1">
        <div class="card shadow-sm border-0">
            <div class="card-body p-0">
                <form id="searchForm" method="get" asp-action="All_bills">
                    <div class="d-flex flex-column flex-lg-row p-3 gap-3">
                        <!-- Search Field with Icon -->
                        <div class="search-wrapper flex-grow-1 position-relative">
                            <label for="searchTerm" class="form-label text-muted small mb-1 d-none d-sm-block">Search by</label>
                            <div class="position-relative d-flex h-100">
                                <!-- Search Icon -->
                                <i class="bi bi-search text-muted position-absolute ms-3" style="z-index: 2;margin-top: 10px;"></i>

                                <!-- Search Input -->
                                <input type="text"
                                       name="searchTerm"
                                       class="form-control ps-5 pe-5 shadow-sm"
                                       placeholder="Search bills by supplier name, amount, or payment method..."
                                       value="@Context.Request.Query["searchTerm"]"
                                       style="border-radius: 8px; height: 50px;">

                                <!-- Clear Button -->
                                @if (!string.IsNullOrEmpty(Context.Request.Query["searchTerm"]))
                                {
                                    <button type="button"
                                            class="btn position-absolute end-0 me-2 p-0"
                                            style="background: transparent; border: none; z-index: 2; margin-top: 10px;"
                                            onclick="clearSearch()"
                                            aria-label="Clear search">
                                        <i class="bi bi-x-circle text-muted fs-5"></i>
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Filters Group -->
                        <div class="filters-group d-flex flex-column flex-md-row align-items-stretch gap-3 mb-2">
                            <!-- Sort By Dropdown -->
                            <div class="dropdown-wrapper position-relative">
                                <label for="sortColumn" class="form-label text-muted small mb-1 d-none d-sm-block">Sort By</label>
                                <div class="select-container position-relative">
                                    <select id="sortColumn" name="sortColumn" class="form-select shadow-sm" style="border-radius: 6px; padding-right: 2rem;">
                                        <option value="CreatedAt" selected="@(Context.Request.Query["sortColumn"] == "CreatedAt")">Date</option>
                                        <option value="BuyerName" selected="@(Context.Request.Query["sortColumn"] == "BuyerName")">Supplier Name</option>
                                        <option value="TotalBillPrice" selected="@(Context.Request.Query["sortColumn"] == "TotalBillPrice")">Amount</option>
                                        <option value="PaymentMethod" selected="@(Context.Request.Query["sortColumn"] == "PaymentMethod")">Payment Method</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Sort Direction Dropdown -->
                            <div class="dropdown-wrapper position-relative">
                                <label for="sortDirection" class="form-label text-muted small mb-1 d-none d-sm-block">Order</label>
                                <div class="select-container position-relative">
                                    <select id="sortDirection" name="sortDirection" class="form-select shadow-sm" style="border-radius: 6px; padding-right: 2rem;">
                                        <option value="asc" selected="@(Context.Request.Query["sortDirection"] == "asc")">Ascending</option>
                                        <option value="desc" selected="@(Context.Request.Query["sortDirection"] == "desc")">Descending</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="action-buttons d-flex align-items-end gap-2 ms-md-auto">
                                <button type="submit" class="btn btn-primary px-4 shadow-sm" style="border-radius: 6px;">
                                    <i class="bi bi-filter me-2"></i>Apply
                                </button>
                                <a href="@Url.Action("All_bills")" class="btn btn-outline-secondary shadow-sm" style="border-radius: 6px;">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Reset
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Advanced Filters Section (Overlay Style, Initially Hidden) -->
                    <div class="advanced-filters rounded-bottom shadow-sm p-3 position-absolute w-100 d-none"
                         id="advancedFilters"
                         style="top: 100%; left: 0; z-index: 10;background-color: 	#e7f1ff; display: none;">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">From Date</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white"><i class="bi bi-calendar3"></i></span>
                                    <input type="date" class="form-control" name="startDate" value="@Context.Request.Query["startDate"]">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">To Date</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white"><i class="bi bi-calendar3"></i></span>
                                    <input type="date" class="form-control" name="endDate" value="@Context.Request.Query["endDate"]">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">Min Amount</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white">₹</span>
                                    <input type="number" class="form-control" placeholder="Min" name="minAmount" value="@Context.Request.Query["minAmount"]">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">Max Amount</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white">₹</span>
                                    <input type="number" class="form-control" placeholder="Max" name="maxAmount" value="@Context.Request.Query["maxAmount"]">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Advanced Filters Toggle -->
                    <div class="d-flex justify-content-center border-top bg-white position-relative" style="z-index: 9;">
                        <button type="button" class="btn btn-link text-primary px-4 py-2" onclick="toggleAdvancedFilters()" aria-expanded="false" aria-controls="advancedFilters">
                            <span id="advancedFiltersText">Advanced Filters</span>
                            <i class="bi bi-chevron-down ms-1" id="advancedFiltersIcon"></i>
                        </button>
                    </div>

                </form>

            </div>
        </div>
    </div>

  <div class="bills-table-container mb-4 mt-4 ">
        <div class="card shadow-sm border-0">
            <!-- Table Header with Stats and Actions -->
            <div class="card-header bg-white p-3 border-bottom">
                <div class="justify-content-between align-items-center">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                        <!-- Left side with title and count -->
                        <div class="d-flex align-items-center gap-2 ms-2">
                            <h5 class="text-nowrap mb-0 fw-semibold me-2">All Supplier Bills</h5>
                            <div class="badge rounded-pill bg-primary bg-opacity-10 text-primary px-3 py-2 fs-6">
                                <span id="billCount">@(Model?.Bills.Count() ?? 0)</span> records
                            </div>
                        </div>
                        <!-- Right side with action buttons -->
                        <div class="d-flex align-items-center gap-2">
                            <!-- Records per page dropdown -->
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        type="button"
                                        id="pageSizeDropdown"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-list-ul me-1"></i><span id="currentPageSize">Context.Request.Query["pageSize"] ?? "10"</span> Records
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="pageSizeDropdown">
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(5)">5 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(10)">10 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(50)">50 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(100)">100 Records</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(0)">All Records</a></li>
                                </ul>
                            </div>
                            <!-- Export dropdown 
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        type="button"
                                        id="exportDropdown"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-download me-1"></i>Export
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="exportDropdown">
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-pdf me-1 text-danger"></i>PDF</a></li>
                                </ul>
                            </div>
                            -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="card border-0 shadow-sm">
                <div class="card-body p-0">
                    <div class="table-wrapper" style="max-height: 400px; overflow-y: auto;">
                        <table class="table table-hover align-middle mb-0">
                            <thead class="table-header bg-light position-sticky top-0" style="z-index: 1;">
                            <tr class="bg-light border-bottom">
                                    <th width="50" class="text-center px-2 py-2 ">#</th>
                                <th class="px-2 py-2">
                                    <a href="@Url.Action("All_bills", new {
                                          searchTerm = Context.Request.Query["searchTerm"],
                                          sortColumn = "BuyerName",
                                          sortDirection = Context.Request.Query["sortColumn"] == "BuyerName" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc",
                                          pageSize = Context.Request.Query["pageSize"]
                                          })" class="text-decoration-none text-dark d-flex align-items-center  ">
                                            <span class="">Supplier Name</span>
                                        <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "BuyerName"
                                              ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                                              : "bi-filter-left text-secondary opacity-50")"></i>
                                    </a>
                                </th>
                                <th class="px-2 py-2">
                                    <a href="@Url.Action("All_bills", new {
                                          searchTerm = Context.Request.Query["searchTerm"],
                                          sortColumn = "TotalBillPrice",
                                           pageSize = Context.Request.Query["pageSize"],
                                           sortDirection = Context.Request.Query["sortColumn"] == "TotalBillPrice" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
                                            })" class="text-decoration-none text-dark d-flex align-items-center ">
                                         <span class="">Amount</span>
                                        <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "TotalBillPrice"
                                                ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                                               : "bi-filter-left text-secondary opacity-50")"></i>
                                    </a>
                                </th>
                                <th class="px-2 py-2">
                                    <a href="@Url.Action("All_bills", new {
                                            searchTerm = Context.Request.Query["searchTerm"],
                                            sortColumn = "PaymentMethod",
                                            pageSize = Context.Request.Query["pageSize"],
                                            sortDirection = Context.Request.Query["sortColumn"] == "PaymentMethod" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
                                            })" 
                                            
                                           class="text-decoration-none text-dark d-flex align-items-center  ">
                                                  <span class="">Payment</span>
                                                  <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "PaymentMethod"
                                                  ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                                                  : "bi-filter-left text-secondary opacity-50")"></i>
                                    </a>
                                </th>
                                <th class="px-2 py-2">
                                    <a href="@Url.Action("All_bills", new {
                                         searchTerm = Context.Request.Query["searchTerm"],
                                         pageSize = Context.Request.Query["pageSize"],
                                         sortColumn = "CreatedAt",
                                         sortDirection = Context.Request.Query["sortColumn"] == "CreatedAt" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
                                         })" class="text-decoration-none text-dark d-flex align-items-center ">
                                         <span class="">Date</span>
                                                 <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "CreatedAt"
                                                  ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                                                  : "bi-filter-left text-secondary opacity-50")"></i>
                                     </a>
                                </th>
                                <th width="110" class="text-center px-2 py-2">
                                    <span class="small">Actions</span>
                                </th>
                            </tr>
                        </thead>

                            <tbody>
                                @if (Model != null && Model.Bills.Any())
                                {

                                    int bill_no = (Model.CurrentPage - 1) * Model.PageSize + 1;
                                    foreach (var bill in Model.Bills)
                                    {
                                        <tr class="bill-row border-bottom">
                                            <td class="text-center text-secondary">@bill_no</td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-circle bg-primary-subtle text-primary me-2" style="width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                                        @{
                                                            string initials = string.Join("", bill.BuyerName.Split(' ').Take(2).Select(n => n[0]));
                                                        }
                                                        <span>@initials</span>
                                                    </div>
                                                    <div>
                                                        <div class="fw-semibold">@bill.BuyerName</div>
                                                        <small class="text-secondary">ID: @bill.B_Id</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @{
                                                    string amountClass = bill.TotalBillPrice > 5000 ? "text-danger" :
                                                    bill.TotalBillPrice > 1000 ? "text-warning" : "text-success";
                                                }
                                                <span class="fw-semibold @amountClass">
                                                    @string.Format(new System.Globalization.CultureInfo("hi-IN"), "{0:C}", bill.TotalBillPrice)
                                                </span>
                                            </td>
                                            <td>
                                                @{
                                                    var method = bill.PaymentMethod.ToString().ToLower();
                                                    string badgeClass = method switch
                                                    {
                                                        "cash" => "bg-success-subtle text-success",
                                                        "credit card" => "bg-primary-subtle text-primary",
                                                        "debit card" => "bg-info-subtle text-info",
                                                        "upi" => "bg-warning-subtle text-warning",
                                                        _ => "bg-secondary-subtle text-secondary"
                                                    };

                                                    string icon = method switch
                                                    {
                                                        "cash" => "bi-cash",
                                                        "credit card" => "bi-credit-card",
                                                        "debit card" => "bi-credit-card",
                                                        "upi" => "bi-phone",
                                                        _ => "bi-wallet2"
                                                    };
                                                }
                                                <span class="badge rounded-pill @badgeClass px-2 py-1">
                                                    <i class="bi @icon me-1"></i>
                                                    @bill.PaymentMethod
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-calendar-date text-secondary me-1"></i>
                                                    <span>@bill.CreatedAt.ToString("MMM dd, yyyy")</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex justify-content-end gap-1">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            data-id="@bill.B_Id"
                                                            onclick="P_bill(this.dataset.id)"
                                                            title="Print Bill">
                                                        <i class="bi bi-printer"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning"
                                                            data-id="@bill.B_Id"
                                                            onclick="E_bill(this.dataset.id)"
                                                            title="Edit Bill">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </button>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                                type="button"
                                                                data-bs-toggle="dropdown"
                                                                aria-expanded="false"
                                                                title="More Actions">
                                                            <i class="bi bi-three-dots-vertical"></i>
                                                        </button>
                                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                                            <li>
                                                                <a class="dropdown-item text-danger" href="#" onclick="deletebill('@bill.B_Id')">
                                                                    <i class="bi bi-trash me-1"></i>Delete Bill
                                                                </a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        bill_no++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-center py-4" style="height:359px;" >
                                            <div class="py-3">
                                                <i class="bi bi-receipt-cutoff fs-2 text-secondary mb-2 d-block"></i>
                                                <h6 class="mb-2">No Bills Found</h6>
                                                <p class="text-secondary mb-3">There are no bills matching your search criteria.</p>
                                                <button onclick="addbill()" class="btn btn-primary">
                                                    <i class="bi bi-plus-circle me-1"></i>Create New Bill
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <!-- Table Footer with Pagination -->
            <div class="card-footer bg-white py-1 d-flex justify-content-between align-items-center border-top">
                <div class="text-muted">
                    Showing <span class="fw-semibold">@(Model?.Bills.Count() ?? 0)</span> of <span class="fw-semibold">@(Model?.TotalItems ?? 0)</span> materials
                </div>

                @if (Model?.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-sm mb-0">
                            <!-- First Page -->
                            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                pageSize = Context.Request.Query["pageSize"],
                                page = 1
                            })" aria-label="First">
                                    <i class="bi bi-chevron-double-left"></i>
                                </a>
                            </li>

                            <!-- Previous Page -->
                            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                page = Model.CurrentPage - 1,
                                pageSize = Context.Request.Query["pageSize"]
                            })" aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>

                            <!-- Dynamic Page Numbers -->
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, startPage + 4);

                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("All_bills", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = i
                                })">@i</a>
                                </li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("All_bills", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = Model.TotalPages
                                })">@Model.TotalPages</a>
                                </li>
                            }
                            <!-- Next Page -->
                            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                pageSize = Context.Request.Query["pageSize"],
                                page = Model.CurrentPage + 1
                            })" aria-label="Next">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                            <!-- Last Page -->
                            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                pageSize = Context.Request.Query["pageSize"],
                                page = Model.TotalPages
                            })" aria-label="Last">
                                    <i class="bi bi-chevron-double-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

<!-- Add Bill Modal -->
<div class="modal" id="addBillModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-lg rounded-4 border-0">
            <!-- Modal Header -->
            <div class="modal-header  text-white position-relative py-4" style="background:var(--primary-dark)">
                <div class="w-100 text-center">
                    <h5 class="modal-title fw-bold d-flex align-items-center justify-content-center">
                        <i class="bi bi-receipt-cutoff me-2 fs-2"></i>
                        <span class="fs-3">Create New Buying Invoice</span>
                    </h5>
                </div>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3 top-50 translate-middle-y"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body p-4">
                <form id="addBillForm" class="needs-validation" novalidate method="post">
                    <div class="row g-4">
                        <div class="row g-3">
                            <div class="col-6">
                                <div class="form-floating position-relative">
                                    <input type="text"
                                           class="form-control form-control-lg shadow-sm rounded-3"
                                           id="buyerName"
                                           name="BuyerName"
                                           placeholder=""
                                           onkeyup="NameChange(this)"
                                           required
                                           autocomplete="off">
                                    <label for="buyerName" class="fw-semibold text-secondary ps-2">
                                        <i class="bi bi-person-badge me-2"></i>Supplier Name
                                    </label>
                                    <div class="valid-feedback"> Looks good! </div>
                     
                                    <div id="nameSuggestions" class="suggestions-dropdown">
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-floating position-relative">
                                    <input type="tel"
                                           class="form-control form-control-lg shadow-sm rounded-3"
                                           id="phoneNumber"
                                           name="PhoneNumber"
                                           placeholder=""
                                           pattern="[0-9]{10}"
                                           maxlength="10"
                                           oninput="formatPhoneNumber(this)"
                                           autocomplete="off" readonly >
                                    <label for="phoneNumber" class="fw-semibold text-secondary ps-2">
                                        <i class="bi bi-telephone me-2"></i>Phone Number
                                    </label>
                                    <div class="valid-feedback">Valid phone number</div>
                                </div>
                            </div>
                        </div>

                        <!-- Materials Section -->
                        <div class="col-12">
                            <div class="card border-0 shadow-sm hover-shadow rounded-4" id="itemContainer">
                                <div class="card-header bg-light border-0 py-3 rounded-top-4">
                                    <h5 class="fw-semibold text-primary mb-0 d-flex align-items-center">
                                        <i class="bi bi-pallet me-2 fs-5"></i>Materials
                                    </h5>
                                </div>
                                <div class="card-body p-3">
                                    <div id="materialsContainer" class="d-grid gap-3">
                                        <!-- Material items will be added here -->
                                    </div>
                                    <button type="button"
                                            class="btn btn-outline-primary w-100 mt-3 py-3 rounded-3 add-material-btn"
                                            onclick="Additem();"
                                            id="addMaterialBtn">
                                        <i class="bi bi-plus-circle me-2"></i>Add Item
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Total Amount -->
                        <div class="col-12">
                            <div class="d-flex p-3 bg-light rounded-4 border shadow-sm">
                                <h5 class="fw-bold text-secondary mb-0 d-flex align-items-center">
                                    <i class="bi bi-calculator me-2 fs-4"></i>Total Amount
                                </h5>
                                <h3 id="totalAmount" class="text-success fw-bold mb-0 ms-2 d-flex align-items-center">
                                    <span class="fs-4">₹</span><span id="totalValue">0.00</span>
                                </h3>
                            </div>
                        </div>

                        <!-- Payment Section -->
                        <div class="col-md-6">
                            <div class="form-floating position-relative">
                                <select class="form-select form-select-lg shadow-sm rounded-3"
                                        id="paymentMethod" name="PaymentMethod" required>
                                    <option value=0>💰 Cash</option>
                                    <option value=1>💳 Credit Card</option>
                                    <option value=2>🏦 Bank Transfer</option>
                                </select>
                                <label for="paymentMethod" class="fw-semibold text-secondary">
                                    <i class="bi bi-credit-card-2-back me-2"></i>Payment Method
                                </label>
                            </div>
                        </div>

                        <!-- Payment Status -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center p-3 bg-light rounded-4 border shadow-sm h-100">
                                <input class="form-check custom-large-checkbox"
                                       type="checkbox"
                                       id="isPaid"
                                       name="IsPaid"
                                       required>
                                <label class="form-check-label ms-2 fw-semibold" for="isPaid">
                                    <i class="bi bi-receipt me-2"></i>Mark as Paid
                                </label>
                                <div class="invalid-feedback" style="max-width: 40%; margin-left: 30px;">
                                    Please confirm payment status
                                </div>
                            </div>
                        </div>

                    </div>
                    <!-- Modal Footer -->
                    <div class="mt-4 px-0 pb-0">
                        <div class="w-100 d-flex justify-content-between border-top pt-4">
                            <button type="button"
                                    class="btn btn-lg btn-outline-secondary rounded-pill px-4 shadow-sm d-flex align-items-center"
                                    data-bs-dismiss="modal">
                                <i class="bi bi-x-lg me-2"></i>Cancel
                            </button>
                            <button type="submit"
                                    id="createInvoiceBtn"
                                    class="btn btn-lg btn-primary rounded-pill px-4 shadow-sm d-flex align-items-center"
                                    disabled>
                                <i class="bi bi-file-earmark-check me-2"></i>Create Invoice
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Bill Modal -->
<div class="modal" id="editBillModal" tabindex="-1" aria-labelledby="editBillModalLabel">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-lg rounded-4 border-0">
            <!-- Modal Header -->
            <div class="modal-header bg-gradient-yellow text-white  position-relative" style="background-color: var(--warning);">
                <div class="w-100 text-center">
                    <h5 class="modal-title fw-bold d-flex align-items-center justify-content-center">
                        <i class="bi bi-receipt-cutoff me-2 fs-2"></i>
                        <span class="fs-3">Edit Supplier Invoice</span>
                    </h5>
                </div>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3 top-50 translate-middle-y"
                        data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <!-- Modal Body -->
            <div class="modal-body p-4">
                <form id="editBillForm" class="needs-validation" novalidate method="post">
                    <div class="row g-4">
                        <!-- Buyer Name Section -->
                        <div class="row mt-2">
                            <div class="col-6 form-floating position-relative">
                                <input type="text"
                                       class="form-control form-control-lg shadow-sm rounded-3"
                                       id="ebuyerName"
                                       name="BuyerName"
                                       placeholder=""
                                       onkeyup="SupplierNameAutoSuggest(this)"
                                       required
                                       autocomplete="off" style="margin-left:-5px">
                                <label for="ebuyerName" class="fw-semibold text-secondary ps-3">
                                    <i class="bi bi-person-badge me-2"></i>Supplier Name
                                </label>
                                <div class="valid-feedback">Looks good!</div>
                                <!-- Suggestions dropdown container -->
                                <div id="supplierSuggestions" class="suggestions-dropdown" style="display: none;"></div>
                            </div>
                            <div class="col-6">
                                <div class="form-floating position-relative">
                                    <input type="tel"
                                           class="form-control form-control-lg shadow-sm rounded-3"
                                           id="ephoneNumber"
                                           name="PhoneNumber"
                                           placeholder=""
                                           pattern="[0-9]{10}"
                                           maxlength="10"
                                           oninput="formatPhoneNumber(this)"
                                           autocomplete="off" readonly>
                                    <label for="ephoneNumber" class="fw-semibold text-secondary ps-3">
                                        <i class="bi bi-telephone me-2"></i>Phone Number
                                    </label>
                                    <div class="valid-feedback">Valid phone number</div>
                                </div>
                            </div>
                        </div>


                        <!-- Materials Section -->
                        <div class="col-12">
                            <div class="card border-0 shadow-sm hover-shadow rounded-4" id="eitemContainer">
                                <div class="card-header bg-light border-0 py-3 rounded-top-4">
                                    <h5 class="fw-semibold text-primary mb-0 d-flex align-items-center">
                                        <i class="bi bi-pallet me-2 fs-5"></i>Materials
                                    </h5>
                                </div>
                                <div class="card-body p-3">
                                    <div id="ematerialsContainer" class="d-grid gap-3">
                                        <!-- Material items will be added here -->
                                    </div>
                                    <button type="button"
                                            class="btn btn-outline-warning w-100 mt-3 py-3 rounded-3 edit-material-btn"
                                            onclick="eAddItem()"
                                            id="addMaterialBtn">
                                        <i class="bi bi-plus-circle me-2"></i>Add Item
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Total Amount -->
                        <div class="col-12">
                            <div class="d-flex p-3 bg-light rounded-4 border shadow-sm">
                                <h5 class="fw-bold text-secondary mb-0 d-flex align-items-center">
                                    <i class="bi bi-calculator me-2 fs-4"></i>Total Amount
                                </h5>
                                <h3 id="editTotalAmount" class="text-success fw-bold mb-0 ms-2 d-flex align-items-center">
                                    <span class="fs-4">₹</span><span id="editTotalValue">0.00</span>
                                </h3>
                            </div>
                        </div>

                        <!-- Payment Section -->
                        <div class="col-md-6">
                            <div class="form-floating position-relative">
                                <select class="form-select form-select-lg shadow-sm rounded-3"
                                        id="editPaymentMethod" name="PaymentMethod" required>
                                    <option value=0>💰 Cash</option>
                                    <option value=1>💳 Credit Card</option>
                                    <option value=2>🏦 Bank Transfer</option>
                                </select>
                                <label for="editPaymentMethod" class="fw-semibold text-secondary">
                                    <i class="bi bi-credit-card-2-back me-2"></i>Payment Method
                                </label>
                            </div>
                        </div>

                        <!-- Payment Status -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center p-3 bg-light rounded-4 border shadow-sm h-100">
                                <input class="form-check custom-large-checkbox"
                                       type="checkbox"
                                       id="editIsPaid"
                                       name="IsPaid"
                                       required>
                                <label class="form-check-label ms-2 fw-semibold" for="editIsPaid">
                                    <i class="bi bi-receipt me-2"></i>Mark as Paid
                                </label>
                                <div class="invalid-feedback" style="max-width: 40%; margin-left: 30px;">
                                    Please confirm payment status
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Modal Footer -->
                    <div class="mt-4 px-0 pb-0">
                        <div class="w-100 d-flex justify-content-between border-top pt-4">
                            <button type="button"
                                    class="btn btn-lg btn-outline-secondary rounded-pill px-4 shadow-sm d-flex align-items-center"
                                    data-bs-dismiss="modal">
                                <i class="bi bi-x-lg me-2"></i>Cancel
                            </button>
                            <button type="submit"
                                    id="updateInvoiceBtn"
                                    class="btn btn-lg btn-warning rounded-pill px-4 shadow-sm d-flex align-items-center"
                                    disabled>
                                <i class="bi bi-file-earmark-check me-2"></i>Update Invoice
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!--confirm delete bill button-->
<div class="modal" id="ConfirmDeleteBillModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow-lg rounded-4 border-0">
            <div class="modal-header bg-gradient-danger text-white position-relative py-3">
                <h5 class="modal-title fw-bold d-flex align-items-center" id="confirmModalTitle">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Confirm Delete Supplier Bill
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="alert alert-danger border-0 bg-danger bg-opacity-10 mb-0">
                    <p id="confirmModalMessage" class="mb-0 d-flex align-items-center">
                        <i class="bi bi-question-circle me-2 fs-5"></i>
                        Are you sure you want to delete this Supplier Bill? <br /> This action cannot be undone.
                    </p>
                </div>
            </div>
            <div class="modal-footer border-top py-3">
                <button type="button"
                        class="btn btn-outline-secondary rounded-pill px-4 d-flex align-items-center"
                        data-bs-dismiss="modal">
                    <i class="bi bi-x-lg me-2"></i>
                    Cancel
                </button>
                <button type="button"
                        class="btn btn-danger rounded-pill px-4 d-flex align-items-center"
                        id="confirmActionBtn">
                    <i class="bi bi-trash me-2"></i>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="~/css/Bills.css">
<!-- Include math.js for safe expression evaluation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/12.0.0/math.min.js"></script>
<script src="~/js/site.js"></script>

@section scripts{
           <script>
    function changePageSize(size) {
    // Get current URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    
    // Update the pageSize parameter
    urlParams.set('pageSize', size);
    
    // Reset to first page when changing page size
    urlParams.set('page', 1);
    
    // Update the displayed size in the dropdown button
    document.getElementById('currentPageSize').textContent = size > 0 ? size : 'All';
    
    // Redirect to the same page with updated parameters
    window.location.href = window.location.pathname + '?' + urlParams.toString();
}

// Initialize the display with the current page size
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const currentSize = urlParams.get('pageSize') || 10;
    document.getElementById('currentPageSize').textContent = currentSize > 0 ? currentSize : 'All';
});

        $(document).ready(function() {

             document.body.appendChild(globalAlertContainer);
              toggleSubmitButtonState();
              //etoggleSubmitButtonState();


            // 1. Load materials data
            let materials = [];
  
             const params = new URLSearchParams({
            searchTerm: '',
            sortColumn: 'ColorName',
            sortDirection: 'asc',
            page: '1',
            pageSize: '9999'
        });

            $.ajax({
                       url: `@Url.Action("All_Mt", "Materials")?`+ params.toString(),
                type: "GET",
                success: function(response) {
                    if ( response.message) {
                        materials = response.message;
                        console.log("Materials loaded:", materials.length);
                    } else {
                        console.error("No data received");
                    }
                },
                error: function(xhr, status, error) {
                    console.error("AJAX error:", error);
                }
            });
            //add materials in EditItem bill

              // for edit in add material
            window.eAddItem = function()
           {

             const $materialsContainer = $('#ematerialsContainer');
             const itemCount = $materialsContainer.find('.item-entry').length + 1;
             const $newItem = $(`
                 <div class="item-entry d-flex align-items-center gap-3 mb-3" id="item-${itemCount}" data-valid="false">
                     <div class="material-item mb-2 p-3 border rounded needs-validation" novalidate>
                         <div class="d-flex justify-content-between align-items-center mb-3">
                             <h6 class="fw-semibold text-primary mb-0 d-flex align-items-center">
                                 <i class="bi bi-pallet me-2 fs-5"></i>Items
                                 <span class="badge bg-primary ms-2">${itemCount}</span>
                             </h6>
                             <button type="button" class="btn btn-outline-danger delete-item-btn">
                                 <i class="bi bi-trash"></i> Delete
                             </button>
                         </div>
                         <div class="row g-3">
                             <div class="col-md-4">
                                 <label class="form-label">Select Item</label>
                                 <select class="form-select item-dropdown is-validatable" id="dropdown-${itemCount}" required>
                                     <option value="">Select Item</option>
                                 </select>
                                 <div class="invalid-feedback">Please select an item</div>
                                 <div class="valid-feedback d-none">Looks good!</div>
                             </div>
                             <div class="col-md-2">
                                 <label class="form-label">Price</label>
                                 <input type="text" class="form-control price-input calc-trigger" placeholder="Price" required>
                                 <div class="invalid-feedback">Enter a valid price (≥ ₹0.01)</div>
                                 <div class="valid-feedback d-none">Looks good!</div>
                             </div>
                             <div class="col-md-2">
                                 <label class="form-label">Quantity</label>
                                 <input type="text" class="form-control quantity-input calc-trigger" placeholder="Quantity" required>
                                 <div class="invalid-feedback ">Enter quantity (≥ 1)</div>
                                 <div class="valid-feedback d-none">Looks good!</div>
                             </div>
                             <div class="col-md-2">
                                <label class="form-label">Total Quantity</label>
                                <div class="input-group-text text-truncate w-100" style="overflow: hidden;">
                                <span class="total-quantity">0.00</span>
                            </div>
                          </div>

                         <div class="col-md-2">
                           <label class="form-label">Total Price</label>
                           <div class="input-group-text text-truncate w-100" style="overflow: hidden;">
                           <span class="total-price">₹0.00</span>
                        </div>
                      </div>
                         </div>
                     </div>
                 </div>
             `);
             $materialsContainer.append($newItem);
         // 1. First modify the dropdown population to include the price in the option's data attribute
         const $dropdown = $newItem.find('.item-dropdown');
         $dropdown.empty().append('<option value="">Select a material</option>');
         materials.forEach(material => {
             $dropdown.append($('<option>', {
                 value: material.id,
                 text: `${material.colorName} - ₹${material.basePrice.toFixed(2)}`,
                 'data-price': material.basePrice  // Add this line to store the price
             }));
         });

        // 2. Then update the change handler to extract and use this price
         $dropdown.on('change', function() {
             const $this = $(this);
             const $priceInput = $this.closest('.row').find('.price-input');
             const selectedOption = $this.find('option:selected');
             const selectedText = selectedOption.text();

             if (selectedOption.val()) {
               
                 const priceMatch = selectedText.match(/₹(\d+\.\d{2})$/);
                 const price = priceMatch ? parseFloat(priceMatch[1]) : 0;
                 $priceInput.val(price.toFixed(2)).data('evaluated', price);
                 $priceInput.removeClass('is-invalid').addClass('is-valid');
             } else {
                 // Clear all values if no item selected
                 $priceInput.val('').data('evaluated', null);
                 $this.closest('.row').find('.quantity-input').val('').data('evaluated', null);
                 $this.closest('.row').find('.total-quantity').text('0.00');
                 $this.closest('.row').find('.total-price').text('₹0.00');
                 $priceInput.removeClass('is-valid is-invalid');
             }

             validateItem($newItem);
             ecalculateGrandTotal();
         });

             // Add event handlers
             $newItem.find('.calc-trigger').on('input change', function() {
                 validateInput($(this));
                 validateItem($newItem);
                 calculateItemTotal($newItem);
                 ecalculateGrandTotal();
             });

             $newItem.find('.is-validatable').on('change', function() {
                 validateInput($(this));
                 validateItem($newItem);
                 ecalculateGrandTotal();
             });

             $newItem.find('.delete-item-btn').click(function() {
                 $newItem.fadeOut(300, function() {
                     $(this).remove();
                     erenumberItems();
                     evalidateAllItems();
                     ecalculateGrandTotal();
                 });
             });

             validateItem($newItem);
         };
           //2 add material in create bill 
           window.Additem = function() {
            const $materialsContainer = $('#materialsContainer');
            const itemCount = $materialsContainer.find('.item-entry').length + 1;

            const $newItem = $(`
                <div class="item-entry d-flex align-items-center gap-3 mb-3" id="item-${itemCount}" data-valid="false">
                    <div class="material-item mb-2 p-3 border rounded needs-validation" novalidate>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="fw-semibold text-primary mb-0 d-flex align-items-center">
                                <i class="bi bi-pallet me-2 fs-5"></i>Items
                                <span class="badge bg-primary ms-2">${itemCount}</span>
                            </h6>
                            <button type="button" class="btn btn-outline-danger delete-item-btn">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Select Item</label>
                                <select class="form-select item-dropdown is-validatable" id="dropdown-${itemCount}" required>
                                    <option value="">Select Item</option>
                                </select>
                                <div class="invalid-feedback">Please select an item</div>
                                <div class="valid-feedback d-none">Looks good!</div>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Price</label>
                                <input type="text" class="form-control price-input calc-trigger" placeholder="Price" required>
                                <div class="invalid-feedback">Enter a valid price (≥ ₹0.01)</div>
                                <div class="valid-feedback d-none">Looks good!</div>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity</label>
                                <input type="text" class="form-control quantity-input calc-trigger" placeholder="Quantity" required>
                                <div class="invalid-feedback ">Enter quantity (≥ 1)</div>
                                <div class="valid-feedback d-none">Looks good!</div>
                            </div>
                            <div class="col-md-2">
                               <label class="form-label">Total Quantity</label>
                               <div class="input-group-text text-truncate w-100" style="overflow: hidden;">
                               <span class="total-quantity">0.00</span>
                           </div>
                         </div>

                        <div class="col-md-2">
                          <label class="form-label">Total Price</label>
                          <div class="input-group-text text-truncate w-100" style="overflow: hidden;">
                          <span class="total-price">₹0.00</span>
                       </div>
                     </div>
                        </div>
                    </div>
                </div>
            `);

            $materialsContainer.append($newItem);

         // 1. First modify the dropdown population to include the price in the option's data attribute
        const $dropdown = $newItem.find('.item-dropdown');
        $dropdown.empty().append('<option value="">Select a material</option>');
        materials.forEach(material => {
            $dropdown.append($('<option>', {
                value: material.id,
                text: `${material.colorName} - ₹${material.basePrice.toFixed(2)}`,
                'data-price': material.basePrice  // Add this line to store the price
            }));
        });

        // 2. Then update the change handler to extract and use this price
        $dropdown.on('change', function() {
            const $this = $(this);
            const $priceInput = $this.closest('.row').find('.price-input');
            const selectedOption = $this.find('option:selected');
            const selectedText = selectedOption.text();

            if (selectedOption.val()) {
                // Extract price from the option text (format: "ColorName - ₹123.45")
                const priceMatch = selectedText.match(/₹(\d+\.\d{2})$/);
                const price = priceMatch ? parseFloat(priceMatch[1]) : 0;

                // Alternative: Use the data-price attribute we stored
                // const price = selectedOption.data('price');

                $priceInput.val(price.toFixed(2)).data('evaluated', price);
                $priceInput.removeClass('is-invalid').addClass('is-valid');
            } else {
                // Clear all values if no item selected
                $priceInput.val('').data('evaluated', null);
                $this.closest('.row').find('.quantity-input').val('').data('evaluated', null);
                $this.closest('.row').find('.total-quantity').text('0.00');
                $this.closest('.row').find('.total-price').text('₹0.00');
                $priceInput.removeClass('is-valid is-invalid');
            }

            validateItem($newItem);
            calculateGrandTotal();
        });

            // Add event handlers
            $newItem.find('.calc-trigger').on('input change', function() {
                validateInput($(this));
                validateItem($newItem);
                calculateItemTotal($newItem);
                calculateGrandTotal();
            });

            $newItem.find('.is-validatable').on('change', function() {
                validateInput($(this));
                validateItem($newItem);
                calculateGrandTotal();
            });

            $newItem.find('.delete-item-btn').click(function() {
                $newItem.fadeOut(300, function() {
                    $(this).remove();
                    renumberItems();
                    validateAllItems();
                    calculateGrandTotal();
                });
            });

            validateItem($newItem);
        };
 
        // Helper Functions
        function validateInput($input) 
        {
            let isValid = false;
            let evaluatedValue = null;

            try {
                  const value = $input.val().trim();
                  if (!value) 
                  {
                    throw new Error('Empty input');
                  }

                // For dropdowns, just check if something is selected
                if ($input.is('select')) {
                    isValid = value !== "";
                    $input.data('evaluated', value);
                }
                // For number inputs, evaluate mathematical expressions
                else {
                    evaluatedValue = math.evaluate(value);
                    if (typeof evaluatedValue !== 'number' || isNaN(evaluatedValue)) {
                        throw new Error('Invalid number');
                    }

                    const min = $input.hasClass('quantity-input') ? 1 : 0.01;
                    isValid = evaluatedValue >= min;
                    $input.data('evaluated', isValid ? evaluatedValue : null);
                }
            } catch (e) {
                isValid = false;
                evaluatedValue = null;
                $input.data('evaluated', null);
            }

            // Update validation classes and feedback messages
            $input.toggleClass('is-invalid', !isValid);
            $input.toggleClass('is-valid', isValid);
            $input.siblings('.invalid-feedback').toggle(!isValid);
            $input.siblings('.valid-feedback').toggle(isValid);
             toggleSubmitButtonState();
             etoggleSubmitButtonState();

            return isValid ? evaluatedValue || $input.val() : false;
        }
        function calculateItemTotal($item) {
            const price = parseFloat($item.find('.price-input').data('evaluated')) || 0;
            const quantity = parseFloat($item.find('.quantity-input').data('evaluated')) || 0;
            const total = price * quantity;

            $item.find('.total-price').text(`₹${total.toFixed(2)}`);
            $item.find('.total-quantity').text(quantity.toFixed(2));

            return total;
        }
        function ecalculateGrandTotal() {
            let grandTotal = 0;
            let totalQuantity = 0;
            let ru = "₹"

            $('#ematerialsContainer .item-entry').each(function() {
                const $item = $(this);
                const itemTotal = calculateItemTotal($item);
                grandTotal += itemTotal;
                const quantity = parseFloat($item.find('.quantity-input').data('evaluated')) || 0;
                totalQuantity += quantity;
            });

             $('#editTotalValue').text( grandTotal.toFixed(2));
        }
        function erenumberItems() {
             $('#ematerialsContainer .item-entry').each(function(index) {
                 const newCount = index + 1;
                 const $item = $(this);
                 $item.attr('id', `item-${newCount}`)
                      .find('.badge').text(newCount)
                      .end()
                      .find('.item-dropdown').attr('id', `dropdown-${newCount}`);
             });
         }
        function calculateGrandTotal() {
            let grandTotal = 0;
            let totalQuantity = 0;
            let ru = "₹"

            $('#materialsContainer .item-entry').each(function() {
                const $item = $(this);
                const itemTotal = calculateItemTotal($item);
                grandTotal += itemTotal;
                const quantity = parseFloat($item.find('.quantity-input').data('evaluated')) || 0;
                totalQuantity += quantity;
            });

            $('#totalValue').text( grandTotal.toFixed(2));
        }
        function renumberItems() {
            $('#materialsContainer .item-entry').each(function(index) {
                const newCount = index + 1;
                const $item = $(this);
                $item.attr('id', `item-${newCount}`)
                     .find('.badge').text(newCount)
                     .end()
                     .find('.item-dropdown').attr('id', `dropdown-${newCount}`);
            });
        }
        function validateItem($item) {
            let isValid = true;

            $item.find('[required]').each(function() {
                isValid = validateInput($(this)) !== false && isValid;
            });

            $item.attr('data-valid', isValid.toString());
             toggleSubmitButtonState();
             etoggleSubmitButtonState();

            return isValid;
        }
        function validateAllItems() {
            let allValid = true;
            $('#materialsContainer .item-entry').each(function() {
                if (!validateItem($(this))) {
                    allValid = false;
                }
            });
             toggleSubmitButtonState();
             

            return allValid;
        }
        function evalidateAllItems() {
              let allValid = true;
              $('#ematerialsContainer .item-entry').each(function() {
                  if (!validateItem($(this))) {
                      allValid = false;
                  }
              });
               etoggleSubmitButtonState();


              return allValid;
          }
         $('#isPaid').change(function() {
            const isValid = $(this).is(':checked');
            $(this).toggleClass('is-invalid', !isValid);
            $(this).toggleClass('is-valid', isValid);
            $(this).siblings('.invalid-feedback').toggle(!isValid);
            $(this).siblings('.valid-feedback').toggle(isValid);
               toggleSubmitButtonState();
        });
       // 3. Form submission handler
        $('#addBillForm').submit(function(e) {
            e.preventDefault();
          

        // Validate form first
        if (!validateAllItems() || !this.checkValidity()) {
            $(this).addClass('was-validated');
            return false;
        }

        const formData = new FormData();
        formData.append("BuyerName", $('#buyerName').val().trim());
        formData.append("P_number", $('#phoneNumber').val().trim());
        formData.append("IsPaid", $('#isPaid').is(':checked'));
        formData.append("PaymentMethod", $('#paymentMethod').val());
        // Append items
        $('#materialsContainer .item-entry').each(function(index) {
            const $item = $(this);
            formData.append(`Items[${index}].MaterialId`, $item.find('.item-dropdown').val());
            formData.append(`Items[${index}].Price`, parseFloat($item.find('.price-input').data('evaluated')) || 0);
            formData.append(`Items[${index}].Quantity`, parseFloat($item.find('.quantity-input').data('evaluated')) || 0);
        });
              $.ajax({
                url:'@Url.Action("CreateBill", "BuyerBilling")',
                type:"POST",
                data: formData,
                processData:false,
                contentType:false,
                success:function(response)
                { 
                     if(response.success)
                     {
                  $("#addBillModal").modal('hide');

                            showAlert("Buying bill Created Successfully","success", 1000);

                                     setTimeout(() => { window.location.reload(); // $("#loader_").css("display","none");
                            
                                     },1100);
                     }
                     else
                     {    
                         showAlert(response.message,"danger", 1000);
                     }

     
                },
                 error: function (xhr, status, error) {
                 // Corrected: Pass the type parameter directly
                 showAlert("An error occurred: " + error, "danger", 1000);
                           //$("#loader_").css("display","none");
             }

                 

            });
        
        });

        const supplierData = [ ];

        // The NameChange function for both adding and editing
        window.NameChange = function(input) {
            const value = input.value.trim();
            const formControl = $(input).closest('.form-floating');
            const feedback = formControl.find('.valid-feedback, .invalid-feedback');

            // Clear previous validation classes
            input.classList.remove('is-valid', 'is-invalid');

            // Validation logic
            if (!value) {
                // Empty field case
                input.classList.add('is-invalid');
                if (feedback.length === 0) {
                    formControl.append('<div class="invalid-feedback">Name is required</div>');
                } else {
                    feedback.text('Name is required').removeClass('valid-feedback').addClass('invalid-feedback');
                }
            } else if (value.length < 3) {
                // Minimum length check
                input.classList.add('is-invalid');
                if (feedback.length === 0) {
                    formControl.append('<div class="invalid-feedback">Name must be at least 3 characters</div>');
                } else {
                    feedback.text('Name must be at least 3 characters').removeClass('valid-feedback').addClass('invalid-feedback');
                }
            } else if (!/^[a-zA-Z\u00C0-\u017F\s'-]+$/.test(value)) {
                // Character validation (letters, accents, spaces, hyphens, apostrophes)
                input.classList.add('is-invalid');
                if (feedback.length === 0) {
                    formControl.append('<div class="invalid-feedback">Only letters and basic punctuation allowed</div>');
                } else {
                    feedback.text('Only letters and basic punctuation allowed').removeClass('valid-feedback').addClass('invalid-feedback');
                }
            } else {
                // Valid input
                input.classList.add('is-valid');
                if (feedback.length === 0) {
                    formControl.append('<div class="valid-feedback">Looks good!</div>');
                } else {
                    feedback.text('Looks good!').removeClass('invalid-feedback').addClass('valid-feedback');
                }
            }

            // Enable/disable submit button based on validity (optional)
            const form = $(input).closest('form');
            form.find('[type="submit"]').prop('disabled', form.find('.is-invalid').length > 0);

            // Autocomplete functionality
            const searchText = input.value.toLowerCase();
            const suggestionsElement = document.getElementById('nameSuggestions');

            // Clear previous suggestions
            suggestionsElement.innerHTML = '';

            // Validate input before sending AJAX request
            if (searchText.length <= 0 || /\d/.test(searchText)) {
                suggestionsElement.style.display = 'none';
                return;
            }

            $.ajax({
                url: '@Url.Action("search", "Party")',  // Adjust if needed
                type: "GET",
                data: { search: searchText },
                processData: true,
                success: function(response) {
                    if (response.success) {
                        supplierData.length = 0;
                        response.data.forEach(function(item) {
                            supplierData.push({
                                name: item.p_Name,
                                phone: item.p_number
                            });
                        });
                    }
                }
            });

            // Filter matching suppliers
            const matchingSuppliers = supplierData.filter(supplier =>
                supplier.name.toLowerCase().includes(searchText)
            );

            if (matchingSuppliers.length === 0) {
                suggestionsElement.style.display = 'none';
                return;
            }

            // Create suggestion items
            matchingSuppliers.forEach(supplier => {
                const suggestionItem = document.createElement('div');
                suggestionItem.className = 'suggestion-item';
                suggestionItem.innerHTML = `
                    <div class="suggestion-name">${supplier.name}</div>
                    <div class="suggestion-phone">${supplier.phone}</div>
                `;

                // Add click event to fill the form
                suggestionItem.addEventListener('click', () => {
                    // Check if we're in add or edit mode
                   
                       
                        // Add mode (buyerName)
                        document.getElementById('buyerName').value = supplier.name;
                        input.classList.remove('is-invalid');
                        input.classList.add('is-valid');
                        feedback.text('Looks good!').removeClass('invalid-feedback').addClass('valid-feedback');

                        // Set phone value for adding
                        const phoneInput = document.getElementById('phoneNumber');
                        phoneInput.value = supplier.phone;
                        phoneInput.classList.remove('is-invalid');
                        phoneInput.classList.add('is-valid');
                        formatPhoneNumber(phoneInput);

                    

                    // Hide suggestions after selection
                    suggestionsElement.style.display = 'none';
                });

                suggestionsElement.appendChild(suggestionItem);
            });

            // Show the suggestions dropdown
            suggestionsElement.style.display = 'block';
        };


        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('#buyerName') && !e.target.closest('#nameSuggestions')) {
                document.getElementById('nameSuggestions').style.display = 'none';
            }
        });

        });
 
        function toggleSubmitButtonState() {
            const isPaidChecked = $('#isPaid').is(':checked');
            const isValid = isPaidChecked;

            // Toggle validation UI
            $('#isPaid').toggleClass('is-valid', isValid);
            $('#isPaid').toggleClass('is-invalid', !isValid);

            // Show or hide feedback
            $('#isPaid').siblings('.invalid-feedback').toggle(!isValid);

            // Enable or disable submit button
              const hasInvalid = $('#addBillForm .is-invalid').length > 0;
            $('#addBillForm [type="submit"]').prop('disabled', hasInvalid);
        }

        function etoggleSubmitButtonState() {
            const isPaidChecked = $('#editIsPaid').is(':checked');
            const isValid = isPaidChecked;

            // Toggle validation UI
                $('#editIsPaid').toggleClass('is-valid', isValid);
                $('#editIsPaid').toggleClass('is-invalid', !isValid);

            // Show or hide feedback
                $('#editIsPaid').siblings('.invalid-feedback').toggle(!isValid);

            // Enable or disable submit button
              const hasInvalid = $('#editBillForm .is-invalid').length > 0;
              $('#editBillForm [type="submit"]').prop('disabled', hasInvalid);
        }

        function P_bill(B_Id)
         {
               const b_id = parseInt(B_Id, 10);
               window.location.href = `/BuyerBilling/PrintBill?b_id=${b_id}`
                   showAlert("Bill Downloaded successfully!","info", 1000);
           }

        $('#editIsPaid').change(function() {
            const isValid = $(this).is(':checked');
            $(this).toggleClass('is-invalid', !isValid);
            $(this).toggleClass('is-valid', isValid);
            $(this).siblings('.invalid-feedback').toggle(!isValid);
            $(this).siblings('.valid-feedback').toggle(isValid);
               etoggleSubmitButtonState();
        });

        function E_bill(B_Id)
          {
             const b_id = parseInt(B_Id, 10);
                 $('#editBillModal').attr('data-id', b_id);

          
                $.ajax({
                 url:'@Url.Action("GetBillById", "BuyerBilling")',
                 type:"GET",
                 data: {B_id:b_id }, 
                 processData:true,
                 success:function(response)
                 {
                      if(response.success)
                      {
                               $('#editBillModal').modal('show');
                               $('input[id="ebuyerName"]').val(response.message.buyerName);
                               $('input[id="ephoneNumber"]').val(parseInt(response.message.p_number));
                               NameChange($('input[id="ebuyerName"]')[0]);

                               $('#editPaymentMethod').val(response.message.paymentMethod);
                               $('#editIsPaid').prop('checked', response.message.isPaid);
                               $('#ematerialsContainer').empty();

     
                                  response.message.items.forEach((item, index) => {
                                     eAddItem();
                                     const $item = $('#ematerialsContainer').find('.item-entry').last();
                                     $item.find('.item-dropdown').val(item.materialId);
                                     $item.find('.price-input').val(item.price);
                                     $item.find('.quantity-input').val(item.quantity);
                                     $item.find('.calc-trigger').trigger('input');
                                     etoggleSubmitButtonState();
                                     setTimeout(() => { 
                                     $('#editBillModal').modal('show'); }, 100);
                               });
                      }
                 },
                  error: function (xhr, status, error) {
                 
                  showAlert("An error occurred: " + error, "danger", 1000);
              }
             });
          }


         
        // 3. Form submission handler
        $('#editBillForm').submit(function(e) {
        e.preventDefault();

        const modalId = $('#editBillModal').data('id');
        const formData = new FormData();

        formData.append("Id", modalId);
        const latestPhoneNumber = $('#ephoneNumber').val().trim();


        const phoneNumber = $('#ephoneNumber').val();  // Corrected ID from 'PhoneNumber' to 'phoneNumber'

        formData.append("BuyerName", $('#ebuyerName').val().trim());
        formData.append("P_number", phoneNumber);  // Now the phone number will be valid

        console.log(latestPhoneNumber);
        formData.append("IsPaid", $('#editIsPaid').is(':checked'));
        formData.append("PaymentMethod", $('#editPaymentMethod').val());

          $('#ematerialsContainer .item-entry').each(function(index) {
              const $item = $(this);
              formData.append(`Items[${index}].MaterialId`, $item.find('.item-dropdown').val());
              formData.append(`Items[${index}].Price`, parseFloat($item.find('.price-input').data('evaluated')) || 0);
              formData.append(`Items[${index}].Quantity`, parseFloat($item.find('.quantity-input').data('evaluated')) || 0);
          });

            $.ajax({
                    url:'@Url.Action("Updatedbuyingbill", "BuyerBilling")',
                  type:"PUT",
                  data: formData,
                  processData:false,
                  contentType:false,
                  success:function(response)
                  {
                       if(response.success)
                       {
                            $(editBillModal).hide();

                              showAlert("Bill updated successfully!","warning", 1000);
                              setTimeout(() => { window.location.reload(); },1100);
                       }
                       else
                       {
                            showAlert(response.message,"danger", 1000);
                       }
                       },
                   error: function (xhr, status, error) {
                  
                   showAlert("An error occurred: " + error, "danger", 1000);
                         
               }

              });

          });

           function deletebill(B_Id)
           {
             const b_id = parseInt(B_Id,10);
             $("#ConfirmDeleteBillModal").modal('show');
             document.getElementById('confirmActionBtn').addEventListener('click', function() 
               {
                     $.ajax({
                       url:'@Url.Action("DeleteBill", "BuyerBilling")',
                       type:"DELETE",
                       data: {B_id:b_id},
                       success:function(response){
                             if(response.success)
                         {

                             $(ConfirmDeleteBillModal).hide();

                              showAlert("Bill Deleted successfully!","danger", 1000);

                                       setTimeout(() => { window.location.reload(); // $("#loader_").css("display","none");

                                       },1100);
                         }
                       
                       },
                       error: function (xhr, status, error) {
                     
                     showAlert("An error occurred: " + error, "danger", 1000);
                             
                             }

                     
                     });
               
               });

           }

           function addbill()
           {
                   $("#addBillModal").modal('show');
           }

                      function toggleAdvancedFilters() {
                const filterSection = document.getElementById('advancedFilters');
                const filterIcon = document.getElementById('advancedFiltersIcon');
                const filterText = document.getElementById('advancedFiltersText');

                const isHidden = filterSection.classList.contains('d-none');

                if (isHidden) {
                    filterSection.classList.remove('d-none');
                    filterSection.classList.add('fade', 'show', 'd-block');
                    filterIcon.classList.replace('bi-chevron-down', 'bi-chevron-up');
                    filterText.textContent = 'Hide Advanced Filters';
                } else {
                    filterSection.classList.remove('show');
                    setTimeout(() => {
                        filterSection.classList.remove('fade', 'd-block');
                        filterSection.classList.add('d-none');
                    }, 150); // Delay matches Bootstrap’s fade transition
                    filterIcon.classList.replace('bi-chevron-up', 'bi-chevron-down');
                    filterText.textContent = 'Advanced Filters';
                }
            }


 function clearSearch() {
            document.querySelector('input[name="searchTerm"]').value = '';
            document.getElementById('searchForm').submit();
    }
    </script>       
 }       

<script>

         function formatPhoneNumber(input) {

        // Remove all non-digit characters
        let phone = input.value.replace(/\D/g, '');

        // Limit to 10 characters
        phone = phone.substring(0, 10);

        // Update the input value
        input.value = phone;

        // Get feedback elements (fixed traversal)
        const formControl = input.closest('.form-floating');
        const validFeedback = formControl?.querySelector('.valid-feedback');
        const invalidFeedback = formControl?.querySelector('.invalid-feedback');

        // Validate
        const isValid = phone.length === 10;

        // Toggle validation classes and feedback visibility
        if (isValid) {
            input.classList.add('is-valid');
            input.classList.remove('is-invalid');
            if (validFeedback) {validFeedback.style.display = 'block';}
            if (invalidFeedback) {invalidFeedback.style.display = 'none';}
        } else {
            input.classList.remove('is-valid');
            if (validFeedback) {validFeedback.style.display = 'none'};

            if (phone.length > 0) {
                input.classList.add('is-invalid');
                if (invalidFeedback) {invalidFeedback.style.display = 'block'};
            }
            else if(phone.lengh = 0)
            {
                input.classList.remove('is-valid','is-invalid');
                 if (invalidFeedback) {invalidFeedback.style.display = 'none'};
                 if (validFeedback) {validFeedback.style.display = 'none'};
            
            }
            else {
                input.classList.remove('is-invalid');
                if (invalidFeedback) {invalidFeedback.style.display = 'none'};
            }
        }
    }
</script>
<script>
        window.SupplierNameAutoSuggest = function(input) {
        const value = input.value.trim();
        const formControl = $(input).closest('.form-floating');
        const feedback = formControl.find('.valid-feedback, .invalid-feedback');

        // Clear previous validation classes
        input.classList.remove('is-valid', 'is-invalid');

        // Validation logic
        if (!value) {
            // Empty field case
            input.classList.add('is-invalid');
            if (feedback.length === 0) {
                formControl.append('<div class="invalid-feedback">Supplier name is required</div>');
            } else {
                feedback.text('Supplier name is required').removeClass('valid-feedback').addClass('invalid-feedback');
            }
        } else if (value.length < 3) {
            // Minimum length check
            input.classList.add('is-invalid');
            if (feedback.length === 0) {
                formControl.append('<div class="invalid-feedback">Supplier name must be at least 3 characters</div>');
            } else {
                feedback.text('Supplier name must be at least 3 characters').removeClass('valid-feedback').addClass('invalid-feedback');
            }
        } else if (!/^[a-zA-Z\u00C0-\u017F\s'-]+$/.test(value)) {
            // Character validation (letters, accents, spaces, hyphens, apostrophes)
            input.classList.add('is-invalid');
            if (feedback.length === 0) {
                formControl.append('<div class="invalid-feedback">Only letters and basic punctuation allowed</div>');
            } else {
                feedback.text('Only letters and basic punctuation allowed').removeClass('valid-feedback').addClass('invalid-feedback');
            }
        } else {
            // Valid input
            input.classList.add('is-valid');
            if (feedback.length === 0) {
                formControl.append('<div class="valid-feedback">Looks good!</div>');
            } else {
                feedback.text('Looks good!').removeClass('invalid-feedback').addClass('valid-feedback');
            }
        }

        // Enable/disable submit button based on validity (optional)
        const form = $(input).closest('form');
        form.find('[type="submit"]').prop('disabled', form.find('.is-invalid').length > 0);

        // Autocomplete functionality
        const searchText = input.value.toLowerCase();
        const suggestionsElement = document.getElementById('supplierSuggestions');

        // Clear previous suggestions
        suggestionsElement.innerHTML = '';

        // Validate input before sending AJAX request
        if (searchText.length <= 0 || /\d/.test(searchText)) {
            suggestionsElement.style.display = 'none';
            return;
        }

        $.ajax({
            url: '@Url.Action("search", "Party")',  // Adjust this URL to your controller endpoint
            type: "GET",
            data: { search: searchText },
            processData: true,
            success: function(response) {
                if (response.success) {
                    supplierDatabase.length = 0;
                    response.data.forEach(function(item) {
                        supplierDatabase.push({
                            name: item.p_Name,
                            phone: item.p_number
                        });

                        console.log(response.data);
                    });

                    // Display suggestions after data is loaded
                    displaySupplierSuggestions(supplierDatabase, suggestionsElement, input);
                }
            }
        });
    };

    // Helper function to display supplier suggestions
    function displaySupplierSuggestions(data, suggestionsElement, input) {
        

        // Create suggestion items
        data.forEach(supplier => {
            const suggestionItem = document.createElement('div');
            suggestionItem.className = 'suggestion-item';
            suggestionItem.innerHTML = `
                <div class="suggestion-name">${supplier.name}</div>
                <div class="suggestion-phone">${supplier.phone}</div>
            `;

            // Add click event to fill the form
            suggestionItem.addEventListener('click', () => {
              
                document.getElementById('ebuyerName').value = supplier.name;
                validateField(document.getElementById('ebuyerName'));
                $('#ebuyerName').closest('.form-floating').find('.invalid-feedback').removeClass('invalid-feedback').addClass('valid-feedback').text("valid Supplier_name");
                const phoneInput = document.getElementById('ephoneNumber');
                phoneInput.value = supplier.phone;
                phoneInput.classList.remove('is-invalid');
                phoneInput.classList.add('is-valid');
                formatPhoneNumber(phoneInput);

                // Hide suggestions after selection
                suggestionsElement.style.display = 'none';
            });

            suggestionsElement.appendChild(suggestionItem);
        });

        // Show the suggestions dropdown
        suggestionsElement.style.display = 'block';
    }

    // Helper function to validate field
    function validateField(input) {
        const formControl = $(input).closest('.form-floating');
        const feedback = formControl.find('.valid-feedback');

        input.classList.remove('is-invalid');
        input.classList.add('is-valid');
        feedback.text('Looks good!');
        const form = $(input).closest('form');
        form.find('[type="submit"]').prop('disabled', form.find('.is-invalid').length > 0);
    }

    // Initialize supplier database
    let supplierDatabase = [];

    // Make sure the formatPhoneNumber function is available
    // If it's not defined elsewhere, add a simple implementation
    if (typeof formatPhoneNumber !== 'function') {
        window.formatPhoneNumber = function(input) {
            let value = input.value.replace(/\D/g, '');
            if (value.length === 10) {
                input.classList.add('is-valid');
                input.classList.remove('is-invalid');
                $(input).siblings('.valid-feedback').text('Valid phone number');
            } else {
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
                const feedback = $(input).siblings('.invalid-feedback');
                if (feedback.length === 0) {
                    $(input).after('<div class="invalid-feedback">Phone number must be 10 digits</div>');
                } else {
                    feedback.text('Phone number must be 10 digits');
                }
            }
        };
    }


</script>
<style>
    /* Enhanced Table Wrapper */
    .table-wrapper {
        height: 400px;
        overflow-y: auto;
      
        border: 1px solid var(--border);
        background-color: white;
        box-shadow: var(--shadow-sm);
        transition: all 0.3s ease;
        margin-bottom: 1.5rem;
    }

        .table-wrapper:hover {
            box-shadow: var(--shadow-md);
        }

    /* Sticky Header with Modern Styling */
    .table thead th {
        position: sticky;
        top: 0;
        background-color: var(--bg-medium);
        color: var(--text-primary);
        font-weight: 600;
        padding: 0.75rem 1rem;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.5px;
        border-bottom: 2px solid var(--border);
        z-index: 10;
        white-space: nowrap;
    }

    /* Table Body Styles */
    .table tbody tr {
        transition: all 0.2s ease;
    }

    .table tbody td {
        padding: 0.75rem 1rem;
        vertical-align: middle;
        border-bottom: 1px solid var(--border);
        color: var(--text-secondary);
    }

    /* Hover Effect */
    .table tbody tr:hover {
        background-color: var(--primary-light);
    }

    /* Scrollbar Styling */
    .table-wrapper::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .table-wrapper::-webkit-scrollbar-track {
        background: var(--bg-light);
       

    }

    .table-wrapper::-webkit-scrollbar-thumb {
        background: var(--border);
       

    }

        .table-wrapper::-webkit-scrollbar-thumb:hover {
            background: var(--text-secondary);
        }
</style>
<style>
    /* ===================== */
    /* MODAL STYLES */
    /* ===================== */
    .modal.fade {
        transition: none;
    }

    .modal-content {
        border-radius: 0.75rem !important;
        overflow: hidden;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        border: none;
    }

    /* Danger Gradient Header */
    .modal-header.bg-gradient-danger {
        background: linear-gradient(135deg, var(--error) 0%, #ff6b6b 100%);
        color: white;
        border-bottom: none;
        box-shadow: 0 2px 5px rgba(220, 53, 69, 0.3);
    }

        .modal-header.bg-gradient-danger .btn-close {
            color: white;
            opacity: 0.8;
            filter: brightness(0) invert(1);
            transition: opacity 0.2s ease;
        }

            .modal-header.bg-gradient-danger .btn-close:hover {
                opacity: 1;
            }

    /* Yellow Gradient Header */
    .modal-header.bg-gradient-yellow {
        background: linear-gradient(135deg, var(--warning) 0%, var(--warning-dark) 100%);
        color: white;
        border-bottom: none;
        box-shadow: 0 2px 5px rgba(255, 193, 7, 0.3);
    }

        .modal-header.bg-gradient-yellow .btn-close {
            color: white;
            opacity: 0.8;
            filter: brightness(0) invert(1);
            transition: opacity 0.2s ease;
        }

            .modal-header.bg-gradient-yellow .btn-close:hover {
                opacity: 1;
            }

    /* Delete Confirmation Modal */
    #ConfirmDeleteBillModal .modal-header {
        background: linear-gradient(135deg, var(--error) 0%, #ff6b6b 100%);
    }

    #ConfirmDeleteBillModal .alert-danger {
        border-radius: 0.5rem;
        border-left: 4px solid var(--error);
    }

    #ConfirmDeleteBillModal #confirmModalMessage {
        font-size: 1.05rem;
        color: var(--text-primary);
    }

    /* ===================== */
    /* FORM ELEMENTS */
    /* ===================== */
    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
    }

    .form-control, .form-select {
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        font-size: 0.9375rem;
        border: 1px solid var(--border);
        transition: all 0.3s ease;
        height: calc(2.5rem + 2px);
    }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 0.25rem rgba(37, 99, 235, 0.15);
            transform: translateY(-1px);
        }

    .input-group-text {
        background-color: var(--bg-medium);
        border: 1px solid var(--border);
        color: var(--text-secondary);
        padding: 0.5rem 1rem;
    }

    /* Validation States */
    .is-valid {
        border-color: var(--success) !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e") !important;
    }

    .invalid-feedback {
        display: block;
        margin-top: 0.25rem;
        font-size: 0.8125rem;
        color: var(--error);
    }

    /* Checkboxes */
    .custom-large-checkbox {
        width: 1.125rem;
        height: 1.125rem;
        margin-top: 0;
        transform: scale(1.3);
        cursor: pointer;
    }

    /* ===================== */
    /* MATERIAL ITEMS */
    /* ===================== */
    .material-item {
        background-color: var(--bg-light);
        border-radius: 0.5rem;
        padding: 1rem;
        transition: all 0.3s ease;
        margin-bottom: 0.75rem;
        border-left: 4px solid transparent;
    }

        .material-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
            background-color: white;
        }

    #ematerialsContainer .material-item {
        border-left-color: var(--warning);
    }

    /* ===================== */
    /* BUTTONS & ACTIONS */
    /* ===================== */
    .btn {
        transition: all 0.3s ease;
        font-weight: 500;
        border-radius: 0.5rem;
    }

        .btn:hover {
            transform: translateY(-2px);
        }

    /* Primary Buttons */
    .btn-primary,
    .add-bill-btn,
    .action-buttons .btn-primary {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        border: none;
        color: white;
    }

        .btn-primary:hover,
        .add-bill-btn:hover,
        .action-buttons .btn-primary:hover {
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
        }

    /* Warning Buttons */
    #updateInvoiceBtn,
    .edit-material-btn {
        background-color: var(--warning);
        border-color: var(--warning);
        color: var(--text-primary);
    }

        #updateInvoiceBtn:not([disabled]):hover,
        .edit-material-btn:hover {
            background-color: var(--warning-dark);
            box-shadow: 0 5px 15px rgba(255, 193, 7, 0.3);
        }

    /* Danger Buttons */
    .delete-item-btn,
    #ConfirmDeleteBillModal .btn-danger {
        background-color: var(--error);
        border-color: var(--error);
        color: white;
    }

        .delete-item-btn:hover,
        #ConfirmDeleteBillModal .btn-danger:hover {
            background-color: var(--error-dark);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }

    /* ===================== */
    /* LAYOUT COMPONENTS */
    /* ===================== */
    .header-container {
        position: relative;
    }

    .breadcrumb {
        font-size: 0.85rem;
        background-color: transparent;
        padding: 0;
    }

    .breadcrumb-item a {
        color: var(--text-secondary);
        text-decoration: none;
    }

    .breadcrumb-item.active {
        color: var(--primary-dark);
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: "•";
        color: var(--text-secondary);
    }

    /* Search & Filters */
    .search-filter-container {
        transition: all 0.3s ease;
    }

    .search-wrapper {
        position: relative;
    }

    .search-input {
        height: 3rem;
        border-radius: 0.5rem;
        padding-left: 2.5rem;
    }

        .search-input:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 0.25rem rgba(37, 99, 235, 0.15);
        }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-secondary);
    }

    .btn-clear {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: var(--text-secondary);
    }

        .btn-clear:hover {
            color: var(--error);
        }

    /* Select Elements */
    .form-select {
        appearance: none;
        padding-right: 2.5rem;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%234a5568' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 16px 12px;
    }

    /* ===================== */
    /* RESPONSIVE ADJUSTMENTS */
    /* ===================== */
    @@media (max-width: 992px) {
        .advanced-filters {
            margin-top: 1rem;
        }

        .action-buttons .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }

    /* ===================== */
    /* UTILITY CLASSES */
    /* ===================== */
    .hover-shadow {
        transition: all 0.3s ease;
    }

        .hover-shadow:hover {
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.08) !important;
        }

    #totalAmount,
    #editTotalAmount {
        background-color: rgba(25, 135, 84, 0.1);
        padding: 0.75rem 1.25rem;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    #totalValue {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--success);
    }
</style>