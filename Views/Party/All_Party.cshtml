@model Moksha_App.Models.PartyListViewModel

@{
    // Check if TempData contains a success message
    var successMessage = TempData["Success"] as string;
    var deleteMessage = TempData["Delete"] as string;
    var modifyMessage = TempData["modify"] as string;
    ViewData["Title"] = "Material Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.body.appendChild(globalAlertContainer);
            showAlert("✅ @successMessage", "success");
        });
    </script>
}
@if (!string.IsNullOrEmpty(deleteMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.body.appendChild(globalAlertContainer);
            showAlert("❌ @deleteMessage", "danger");
        });
    </script>
}
@if (!string.IsNullOrEmpty(modifyMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.body.appendChild(globalAlertContainer);
            showAlert("⚠️ @modifyMessage", "warning");
        });
    </script>
}
@if (ViewBag.Error != null)
{
    <p style="color:red">@ViewBag.Error</p>
}

<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary fw-bold">
            <i class="bi bi-people-fill me-2"></i>Party Management
        </h3>
        <button type="button" class="btn btn-primary rounded-pill shadow-sm" id="AddParty">
            <i class="bi bi-person-plus me-1"></i> Add New Party
        </button>
    </div>

    <!-- Party Type Filter -->
    <div class="card shadow-sm mb-4 border-0 rounded-4">
        <div class="card-body p-3">
            <form id="searchForm" method="get" asp-action="All_Party">
                <div class="d-flex flex-column flex-lg-row p-1 gap-3 align-items-end">
                    <div class="form-group">
                        <label for="partyType" class="form-label small text-muted mb-1">View Parties</label>
                        <select id="party_" name="party_" class="form-select shadow-sm" style="min-width: 200px; height: 45px; border-radius: 8px;">
                            <option value="All" selected="@(Context.Request.Query["party_"] == "All")">All Parties</option>
                            <option value="Supplier" selected="@(Context.Request.Query["party_"] == "Supplier")">Suppliers</option>
                            <option value="Customer" selected="@(Context.Request.Query["party_"] == "Customer")">Customers</option>
                        </select>
                    </div>

                    <div class="search-wrapper flex-grow-1 position-relative">
                        <label for="searchTerm" class="form-label small text-muted mb-1">Search</label>
                        <div class="position-relative d-flex align-items-end h-100">
                            <!-- Search Icon -->
                            <i class="bi bi-search text-muted position-absolute ms-3" style="z-index: 2; margin-bottom: 10px;"></i>

                            <!-- Search Input -->
                            <input type="text"
                                   id="searchTerm"
                                   name="searchTerm"
                                   class="form-control ps-5 pe-5 shadow-sm"
                                   placeholder="Search by name, phone number, or address"
                                   value="@Context.Request.Query["searchTerm"]"
                                   style="border-radius: 8px; height: 45px;">

                            <!-- Clear Button -->
                            @if (!string.IsNullOrEmpty(Context.Request.Query["searchTerm"]))
                            {
                                <button type="button"
                                        class="btn position-absolute end-0 me-2 p-0"
                                        style="background: transparent; border: none; z-index: 2; margin-bottom: 10px;"
                                        onclick="clearSearch()"
                                        aria-label="Clear search">
                                    <i class="bi bi-x-circle text-muted fs-5"></i>
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons d-flex align-items-end gap-2 ms-md-auto">
                        <button type="submit" class="btn btn-primary px-4 shadow-sm" style="border-radius: 8px; height: 45px;">
                            <i class="bi bi-filter me-2"></i>Apply Filters
                        </button>
                        <a href="@Url.Action("All_Party")" class="btn btn-outline-secondary shadow-sm" style="border-radius: 8px; height: 45px; align-content:center">
                            <i class="bi bi-arrow-counterclockwise me-1"></i>Reset
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow-sm border-0 rounded-4 mb-4">
        <!-- Header Section -->
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center border-bottom">
            <div class="d-flex align-items-center">
                <h5 class="mb-0 fw-bold me-3">
                    @if (Context.Request.Query["party_"] == "Supplier")
                    {
                        <span class="text-success">Suppliers</span>
                    }
                    else if (Context.Request.Query["party_"] == "Customer")
                    {
                        <span class="text-info">Customers</span>
                    }
                    else
                    {
                        <span>All Parties</span>
                    }
                </h5>
                <div class="badge rounded-pill bg-primary bg-opacity-10 text-primary px-3 py-2">
                    <span id="partyCount">@(Model?.Party.Count() ?? 0)</span> parties
                </div>
            </div>
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle rounded-pill"
                        type="button"
                        id="pageSizeDropdown"
                        data-bs-toggle="dropdown">
                    <i class="bi bi-list-ul me-1"></i><span id="currentPageSize">@Context.Request.Query["pageSize"]</span> Records
                </button>
                <ul class="dropdown-menu dropdown-menu-end shadow-sm rounded-3" aria-labelledby="pageSizeDropdown">
                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(5)">5 Records</a></li>
                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(10)">10 Records</a></li>
                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(50)">50 Records</a></li>
                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(100)">100 Records</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(0)">All Records</a></li>
                </ul>
            </div>
        </div>

        <!-- Table Section -->
        <div class="card-body p-0">
            <div class="table-wrapper" style="max-height: 400px; overflow-y: auto;">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-header bg-light position-sticky top-0" style="z-index: 10;">
                        <tr class="bg-light">
                            <th scope="col" class="py-3 ps-4" width="5%">#</th>
                            <th scope="col" class="py-3" width="25%">
                                <a href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    party_ = Context.Request.Query["party_"],
                                    sortColumn = "P_Name",
                                    sortDirection = Context.Request.Query["sortColumn"] == "P_Name"
                                    && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
                                })"
                                   class="text-decoration-none text-dark d-flex align-items-center">
                                    <span>Party Name</span>
                                    <div class="ms-2">
                                        @if (Context.Request.Query["sortColumn"] == "P_Name")
                                        {
                                            <i class="bi @(Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt" : "bi-sort-down-alt") text-primary"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-filter text-muted opacity-50"></i>
                                        }
                                    </div>
                                </a>
                            </th>
                            <th scope="col" class="py-3" width="20%">
                                <a href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    party_ = Context.Request.Query["party_"],
                                    sortColumn = "P_number",
                                    sortDirection = Context.Request.Query["sortColumn"] == "P_number" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
                                })" class="text-decoration-none text-dark d-flex align-items-center">
                                    <span>Phone Number</span>
                                    <div class="ms-2">
                                        @if (Context.Request.Query["sortColumn"] == "P_number")
                                        {
                                            <i class="bi @(Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt" : "bi-sort-down-alt") text-primary"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-filter text-muted opacity-50"></i>
                                        }
                                    </div>
                                </a>
                            </th>
                            <th scope="col" class="py-3" width="25%">
                                <a href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    party_ = Context.Request.Query["party_"],
                                    sortColumn = "P_Address",
                                    sortDirection = Context.Request.Query["sortColumn"] == "P_Address" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
                                })" class="text-decoration-none text-dark d-flex align-items-center">
                                    <span>Address</span>
                                    <div class="ms-2">
                                        @if (Context.Request.Query["sortColumn"] == "P_Address")
                                        {
                                            <i class="bi @(Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt" : "bi-sort-down-alt") text-primary"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-filter text-muted opacity-50"></i>
                                        }
                                    </div>
                                </a>
                            </th>
                            <th scope="col" class="py-3" width="10%">Type</th>
                            <th scope="col" class="py-3 text-end pe-4" width="15%">Actions</th>
                        </tr>
                    </thead>
                
                 
                                 <tbody>
                        @if (Model != null && Model.Party.Any())
                        {
                            int Party_No = (Model.CurrentPage - 1) * Model.PageSize + 1;
                            foreach (var party in Model.Party)
                            {
                                string rowClass = party.p_t.ToString() == "Supplier" ? "supplier-row" : "customer-row";
                                string badgeClass = party.p_t.ToString() == "Supplier" ? "bg-success" : "bg-info";
                                string typeIcon = party.p_t.ToString() == "Supplier" ? "bi-box-seam" : "bi-person";

                                <tr class="@rowClass">
                                    <td class="ps-4">@Party_No</td>
                                    <td class="fw-semibold">
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-circle me-2 @(party.p_t.ToString() == "Supplier" ? "bg-success-subtle" : "bg-info-subtle")">
                                                <i class="bi @typeIcon text-@(party.p_t.ToString() == "Supplier" ? "success" : "info")"></i>
                                            </div>
                                            @party.P_Name
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-telephone-fill me-2 text-muted"></i>
                                            <span>@party.P_number</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-geo-alt-fill me-2 text-muted"></i>
                                            <span>@party.P_Address</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @badgeClass">
                                            <i class="bi @typeIcon me-1"></i>
                                            @party.p_t
                                        </span>
                                    </td>
                                    <td class="text-end pe-4">
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-outline-primary rounded-start-2 details-btn"
                                                    id="EditParty"
                                                    data-id="@party.Id"
                                                    data-name="@party.P_Name"
                                                    data-number="@party.P_number"
                                                    data-address="@party.P_Address"
                                                    data-party = "@party.p_t"
                                                    data-bs-toggle="tooltip"
                                                    data-bs-title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger rounded-end-2 delete-btn"
                                                    id="DeleteParty"
                                                    data-id="@party.Id"
                                                    data-bs-toggle="tooltip"
                                                    data-bs-title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                Party_No++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center py-5">
                                    <div class="py-4">
                                        <i class="bi bi-people-fill display-3 text-secondary opacity-50"></i>
                                        <p class="text-muted mt-3 mb-3">No parties found</p>
                                        <button class="btn btn-primary rounded-pill" id="AddPartyEmpty">
                                            <i class="bi bi-person-plus me-2"></i> Add Your First Party
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
              
                </table>
            </div>

            <!-- Pagination Section -->
            <div class="card-footer bg-white py-3 d-flex justify-content-between align-items-center border-top">
                <div class="text-muted">
                    Showing <span class="fw-semibold">@(Model?.Party.Count() ?? 0)</span> of <span class="fw-semibold">@(Model?.TotalItems ?? 0)</span> parties
                </div>

                @if (Model?.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-sm mb-0">
                            <!-- First Page -->
                            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link rounded-start" href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    party_ = Context.Request.Query["party_"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = 1
                                })" aria-label="First">
                                    <i class="bi bi-chevron-double-left"></i>
                                </a>
                            </li>

                            <!-- Previous Page -->
                            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    party_ = Context.Request.Query["party_"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    page = Model.CurrentPage - 1,
                                    pageSize = Context.Request.Query["pageSize"]
                                })" aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>

                            <!-- Dynamic Page Numbers -->
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, startPage + 4);

                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("All_Party", new {
                                        searchTerm = Context.Request.Query["searchTerm"],
                                        party_ = Context.Request.Query["party_"],
                                        sortColumn = Context.Request.Query["sortColumn"],
                                        pageSize = Context.Request.Query["pageSize"],
                                        sortDirection = Context.Request.Query["sortDirection"],
                                        page = i
                                    })">@i</a>
                                </li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("All_Party", new {
                                        searchTerm = Context.Request.Query["searchTerm"],
                                        party_ = Context.Request.Query["party_"],
                                        sortColumn = Context.Request.Query["sortColumn"],
                                        sortDirection = Context.Request.Query["sortDirection"],
                                        pageSize = Context.Request.Query["pageSize"],
                                        page = Model.TotalPages
                                    })">@Model.TotalPages</a>
                                </li>
                            }

                            <!-- Next Page -->
                            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    party_ = Context.Request.Query["party_"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = Model.CurrentPage + 1
                                })" aria-label="Next">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>

                            <!-- Last Page -->
                            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link rounded-end" href="@Url.Action("All_Party", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    party_ = Context.Request.Query["party_"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = Model.TotalPages
                                })" aria-label="Last">
                                    <i class="bi bi-chevron-double-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal Popup -->
<div class="modal" id="partyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Party</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("AddParty")
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal Popup -->
<div class="modal" id="editpartyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">edit  Party</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("EditParty")
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal Popup -->
<div class="modal " id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <!-- Modal Header -->
            <div class="modal-header border-0 pb-0">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body text-center px-4 pt-0 pb-4">
                <div class="mb-3">
                    <span class="badge rounded-circle bg-danger p-3 mb-3">
                        <i class="bi bi-exclamation-triangle-fill fs-4"></i>
                    </span>
                    <h5 class="modal-title fw-bold mb-3" id="deleteConfirmModalLabel">Delete Party</h5>
                </div>

                <p class="text-dark mb-1">Are you sure you want to delete this party?</p>
                <p class="text-muted small mb-4">This action cannot be undone.</p>

                <div class="d-flex justify-content-center gap-2 pt-2">
                    <button type="button" class="btn btn-outline-secondary px-4" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger px-4" id="confirmDeletePartyBtn">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


<script>

         document.addEventListener('click', function (event) {
        if (event.target.matches('#DeleteParty') || event.target.closest('#DeleteParty')) {
            const button = event.target.closest('#DeleteParty');
            if (button) {
                const selectedPartyId = button.dataset.id;

                // Show your modal
                const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
                modal.show();

                // Optional: store selectedPartyId for later use (e.g. deletion)
                document.getElementById('confirmDeletePartyBtn').onclick = function () {
                    fetch(`/Party/DeleteParty/${selectedPartyId}`, {
                        method: 'DELETE'
                    })
                    .then(res => {
                        if (res.ok) {
                            
                            location.reload(); // Or remove the row from table
                        } else {
                            return res.text().then(text => { throw new Error(text); });
                        }
                    })
                    .catch(err => {
                        alert("Error: " + err.message);
                    });
                };
            }
        }
    });


       document.addEventListener('click', function (event) {
       
       if (event.target.matches('#AddParty, #AddPartyEmpty')){
          
            const modal = new bootstrap.Modal(document.getElementById('partyModal'));
            modal.show();
        }


    });

    document.addEventListener('click', function (event) {

        const editButton = event.target.closest('#EditParty');

    if (editButton) {
       
        const partyId = editButton.dataset.id;
        const partyName = editButton.dataset.name;
        const partyNumber = editButton.dataset.number;
        const partyAddress = editButton.dataset.address;
        const partytype= editButton.dataset.party;
        let party;
        (partytype == "Supplier")?party = "0": party =  "1"

        // Populate modal fields
        document.getElementById('Edit_PartyID').value = partyId;
        document.getElementById('Edit_P_Name').value = partyName;
        document.getElementById('Edit_P_number').value = partyNumber;
        document.getElementById('Edit_P_Address').value = partyAddress;
        document.getElementById('Edit_p_t').value = party;
        document.getElementById('Edit_IsActive').checked = true;

        // You can also load party type and status if those are passed too
        if (editButton.dataset.type) {
            document.getElementById('Edit_p_t').value = editButton.dataset.type;
        }

        if (editButton.dataset.active) {
            document.getElementById('Edit_IsActive').checked = editButton.dataset.active === 'true';
        }

        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('editpartyModal'));
        modal.show();
    }

    });


      document.addEventListener('DOMContentLoaded', function() {
                    const form = document.getElementById('partyForm');

        form.addEventListener('submit', function(event) {
            event.preventDefault();
            console.log("ddf");

            // Validate all fields
            const isValid = validateForm();

            if (isValid) {
                // Form is valid - proceed with submission
                const formData = {

                             P_Name: document.getElementById('P_Name').value,
                            P_number: document.getElementById('P_number').value,
                            IsActive: document.getElementById('IsActive').checked,
                            p_t: parseInt(document.getElementById('p_t').value),
                            P_Address : document.getElementById('P_Address').value,
                      
                };
               

                    fetch('/Party/CreatePartyAsync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then( async response => {
                  const data = await response.json();

                 if (response.ok && data.success)
                 {
                        window.location.reload();
                 }
                 else
                 {
                     showAlert(data.message || "An error occurred", "danger", 3000);
                  }
                  })
            .catch(error => {
                    showAlert(error.toString(),"danger", 1000);
                 });

            }
        });

        // Add real-time validation on field blur
        form.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('blur', () => validateField(input));
        });
    });

    function validateForm() {
        let isValid = true;
        const form = document.getElementById('partyForm');

        form.querySelectorAll('input, select').forEach(input => {
            if (!validateField(input)) {
                isValid = false;
            }
        });

        form.classList.add('was-validated');
        return isValid;
    }

        function validateField(input) {
            const id = input.id;

            // Validate Party Name
            if (id === 'P_Name' || id === 'Edit_P_Name') {
                if (input.value.length === 0) {
                    setInvalid(input, 'Party name is required');
                    return false;
                }

                if (input.value.length < 3) {
                    setInvalid(input, 'Must be at least 3 characters');
                    return false;
                }

                if (input.value.length > 100) {
                    setInvalid(input, 'Max 100 characters allowed');
                    return false;
                }

                const nameRegex = /^[a-zA-Z\s]+$/;
                if (!nameRegex.test(input.value)) {
                    setInvalid(input, 'Only letters and spaces allowed');
                    return false;
                }

                if (input.value.trim().length === 0) {
                    setInvalid(input, 'Cannot be just whitespace');
                    return false;
                }
            }

            // Validate Phone Number
            if (id === 'P_number' || id === 'Edit_P_number') {
                const phoneRegex = /^[0-9]{10}$/;
                if (!phoneRegex.test(input.value)) {
                    setInvalid(input, '10-digit number required');
                    return false;
                }
            }

            // Validate Party Type
            if (id === 'p_t' || id === 'Edit_p_t') {
                if (input.value === "") {
                    setInvalid(input, 'Please select a type');
                    return false;
                }
            }

            // If we get here, field is valid
            setValid(input);
            return true;
        }

        function setInvalid(input, message) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            const feedback = input.nextElementSibling;
            if (feedback && feedback.classList.contains('invalid-feedback')) {
                feedback.textContent = message;
            }
        }

        function setValid(input) {
            input.classList.add('is-valid');
            input.classList.remove('is-invalid');
        }


        function changePageSize(size) {
    // Get current URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    
    // Update the pageSize parameter
    urlParams.set('pageSize', size);
    
    // Reset to first page when changing page size
    urlParams.set('page', 1);
    
    // Update the displayed size in the dropdown button
    document.getElementById('currentPageSize').textContent = size > 0 ? size : 'All';
    
    // Redirect to the same page with updated parameters
    window.location.href = window.location.pathname + '?' + urlParams.toString();
}
      function clearSearch() {
                document.querySelector('input[name="searchTerm"]').value = '';
                document.getElementById('searchForm').submit();
        }


</script>


<script>

          document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('editPartyForm');

            form.addEventListener('submit', function(event) {
                event.preventDefault();
                event.stopPropagation();

                // Validate all fields
                const isValid = validateForm();

                if (isValid) {
                    // Form is valid - proceed with submission
                    const formData = {
                        Id: parseInt(document.getElementById('Edit_PartyID').value),
                        P_Name: document.getElementById('Edit_P_Name').value,
                        P_number: document.getElementById('Edit_P_number').value,
                        p_t: parseInt(document.getElementById('Edit_p_t').value),
                        IsActive: document.getElementById('Edit_IsActive').checked,
                        P_Address : document.getElementById('Edit_P_Address').value
                    };

                fetch('EditParty', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then( async response => {
                      const data = await response.json();

                     if (response.ok && data.success)
                     {
                            window.location.reload();
                     }
                     else
                     {
                         showAlert(data.message || "An error occurred", "danger", 3000);
                      }
                      })
                .catch(error => {
                        showAlert(error.toString(),"danger", 1000);
                     });

                }
            });

                 form.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('blur', () => validateField(input));
        });
    });

    function validateForm() {
        let isValid = true;
        const form = document.getElementById('editPartyForm');

        form.querySelectorAll('input, select').forEach(input => {
            if (!validateField(input)) {
                isValid = false;
            }
        });

        form.classList.add('was-validated');
        return isValid;
    }
      
</script>



<style>
    /* Avatar circle for party type */
    .avatar-circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
    }

    /* Customer and Supplier row styling */
    .customer-row {
        border-left: 3px solid #0dcaf0;
    }

    .supplier-row {
        border-left: 3px solid #198754;
    }

    /* Improved card styling */
    .card {
        transition: all 0.3s ease;
    }

    /* Improved table styling */
    .table > :not(caption) > * > * {
        padding: 0.75rem 1rem;
    }

    /* Styling for the add button */
    #AddParty, #AddPartyEmpty {
        transition: all 0.2s ease;
    }

        #AddParty:hover, #AddPartyEmpty:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
        }

    /* Tooltip styling */
    .tooltip {
        font-size: 0.75rem;
    }

    /* Animation for hovering over buttons */
    .btn {
        transition: all 0.2s ease;
    }

    /* Style for pagination */
    .pagination .page-link {
        border-radius: 0;
        color: #6c757d;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
    }

    /* Search input focus effect */
    input:focus, select:focus {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15) !important;
    }

    .table-wrapper {
        height: 400px;
        overflow-y: auto;
    }

    .table thead th {
        position: sticky;
        top: 0;
        background-color: #f8f9fa; /* light gray to match Bootstrap's bg-light */
        z-index: 5;
    }


</style>
