@model Moksha_App.Models.Party

@{
    // Check if TempData contains a success message
    var successMessage = TempData["Success"] as string;
    var deleteMessage = TempData["Delete"] as string;
    var modifyMessage = TempData["modify"] as string;
    ViewData["Title"] = "Material Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.body.appendChild(globalAlertContainer);
            showAlert("✅ @successMessage", "success");
        });
    </script>
}
@if (!string.IsNullOrEmpty(deleteMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.body.appendChild(globalAlertContainer);
            showAlert("❌ @deleteMessage", "danger");
        });
    </script>
}
@if (!string.IsNullOrEmpty(modifyMessage))
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.body.appendChild(globalAlertContainer);
            showAlert("⚠️ @modifyMessage", "warning");
        });
    </script>
}
@if (ViewBag.Error != null)
{
    <p style="color:red">@ViewBag.Error</p>
}

<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary fw-bold"><i class="bi bi-people-fill me-2"></i>Party Management</h3>
        <div class="btn-group">
            
            <!-- Button to trigger modal -->
            <button type="button" class="btn btn-outline-primary" id="AddParty">
                <i class="bi bi-person-plus me-1"></i> Add New Party
            </button>
        </div>
    </div>

    <!-- Party Type Filter -->
    <div class="card shadow-sm mb-3">
        <div class="card-body d-flex flex-column flex-md-row align-items-md-center gap-3">
            <label for="partyType" class="form-label mb-0 me-2 fw-semibold">View Parties:</label>
            <select id="partyType" class="form-select w-auto" onchange="filterParties()" style="min-width: 200px;">
                <option value="All">All</option>
                <option value="Buyer">Buyers</option>
                <option value="Seller">Sellers</option>
            </select>
        </div>
    </div>

    <!-- Party List Table -->
    <div id="partyList" class="card shadow-sm">
        <div class="card-body p-0">
            <table class="table table-striped mb-0">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>Contact</th>
                        <th>Type</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="partyTableBody">
                 
                   
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal Popup -->
<div class="modal" id="partyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Party</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("AddParty")
            </div>
        </div>
    </div>
</div>

<script>

       document.addEventListener('click', function (event) {
       
        if (event.target.matches('#AddParty')) { // Replace with your button's ID or selector
          
            const modal = new bootstrap.Modal(document.getElementById('partyModal'));
            modal.show();
        }


    });
</script>

<script>

      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('partyForm');

        form.addEventListener('submit', function(event) {
            event.preventDefault();
            event.stopPropagation();

            // Validate all fields
            const isValid = validateForm();

            if (isValid) {
                // Form is valid - proceed with submission
                const formData = {
                    P_Name: document.getElementById('P_Name').value,
                    P_number: document.getElementById('P_number').value,
                    p_t: parseInt(document.getElementById('p_t').value),
                    IsActive: document.getElementById('IsActive').checked,
                    P_Address : document.getElementById('P_Address').value
                };

            fetch('CreatePartyAsync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then( async response => {
                  const data = await response.json();

                 if (response.ok && data.success)
                 {
                        window.location.reload();
                 }
                 else
                 {
                     showAlert(data.message || "An error occurred", "danger", 3000);
                  }
                  })
            .catch(error => {
                    showAlert(error.toString(),"danger", 1000);
                 });

            }
        });

        // Add real-time validation on field blur
        form.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('blur', () => validateField(input));
        });
    });

    function validateForm() {
        let isValid = true;
        const form = document.getElementById('partyForm');

        form.querySelectorAll('input, select').forEach(input => {
            if (!validateField(input)) {
                isValid = false;
            }
        });

        form.classList.add('was-validated');
        return isValid;
    }

    function validateField(input) {
        if (input.id === 'P_Name') {
                if (input.id === 'P_Name') {
        // Check for empty field
        if (input.value.length === 0) {
            setInvalid(input, 'Party name is required');
            return false;
        }

        // Check minimum length
        if (input.value.length < 3) {
            setInvalid(input, 'Must be at least 3 characters');
            return false;
        }

        // Check maximum length
        if (input.value.length > 100)
        {
            setInvalid(input, 'Max 100 characters allowed');
            return false;
        }
        // Check character pattern (letters and spaces only)
        const nameRegex = /^[a-zA-Z\s]+$/;
        if (!nameRegex.test(input.value)) {
            setInvalid(input, 'Only letters and spaces allowed');
            return false;
        }

        // Trim whitespace and check if empty after trim
        if (input.value.trim().length === 0) {
            setInvalid(input, 'Cannot be just whitespace');
            return false;
        }
    }
        }

        if (input.id === 'P_number') {
            const phoneRegex = /^[0-9]{10}$/;
            if (!phoneRegex.test(input.value)) {
                setInvalid(input, '10-15 digit number required');
                return false;
            }
        }

        if (input.id === 'p_t' && input.value === "") {
            setInvalid(input, 'Please select a type');
            return false;
        }

        // If we get here, field is valid
        setValid(input);
        return true;
    }

    function setInvalid(input, message) {
        input.classList.add('is-invalid');
        input.classList.remove('is-valid');
        const feedback = input.nextElementSibling;
        if (feedback && feedback.classList.contains('invalid-feedback')) {
            feedback.textContent = message;
        }
    }

    function setValid(input) {
        input.classList.add('is-valid');
        input.classList.remove('is-invalid');
    }

</script>