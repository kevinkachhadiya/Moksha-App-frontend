@model Moksha_App.Models.BillListViewModel
<div class="container-fluid vh-100 d-flex flex-column m-2">
 
    <div class=" mb-2 mt-2">
        <!-- Decorative top accent bar -->
        <div class=""></div>

        <!-- Main header content -->
        <div class="d-flex justify-content-between align-items-center">
            <!-- Left side with title and breadcrumb -->
            <div class="d-flex flex-column">
                <div class="d-flex align-items-center mb-1">
                    <div class="icon-container me-3">
                        <i class="bi bi-receipt-cutoff text-primary"></i>
                    </div>
                    <h2 class="text-primary fw-bold mb-0">Sales Billing Management</h2>
                </div>
            </div>
            <!-- Right side with action button -->
            <button class="btn btn-primary rounded-pill  d-flex align-items-center px-2 py-2 shadow-sm add-bill-btn"
              id="cutomer-invoice"
                  >
                <i class="bi bi-plus-circle me-2"></i>
                <span>
                    <span>Add New Selling Bill</span>
                </span>
            </button>
        </div>
    </div>

    <div class="search-filter-container mb-3">
        <div class="card shadow-sm border-0">
            <div class="card-body p-0">
                <form id="searchForm" method="get" asp-action="All_bills">
                    <!-- Main Filter Row -->
                    <div class="d-flex flex-column flex-lg-row p-3 pb-0 gap-3">
                        <!-- Search Input -->
                        <div class="flex-grow-1">
                            <div class="position-relative">
                                <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
                                <input type="text"
                                       name="searchTerm"
                                       class="form-control ps-5 shadow-sm"
                                       placeholder="Search bills by buyer name, amount, or payment method..."
                                       value="@Context.Request.Query["searchTerm"]"
                                       style="border-radius: 8px; height: 43px;">
                                @if (!string.IsNullOrEmpty(Context.Request.Query["searchTerm"]))
                                {
                                    <button type="button"
                                            class="btn position-absolute top-50 end-0 translate-middle-y me-2 p-0"
                                            style="background: transparent; border: none;"
                                            onclick="clearSearch()"
                                            aria-label="Clear search">
                                        <i class="bi bi-x-circle text-muted fs-5"></i>
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Filters and Action Buttons -->
                        <div class="d-flex flex-column flex-md-row flex-wrap gap-3 w-100">
                            <!-- Sort Column -->
                            <div>
                                <label for="sortColumn" class="form-label text-muted small mb-1">Sort By</label>
                                <select id="sortColumn" name="sortColumn" class="form-select shadow-sm" style="border-radius: 6px;">
                                    <option value="CreatedAt" selected="@(Context.Request.Query["sortColumn"] == "CreatedAt")">Date</option>
                                    <option value="BuyerName" selected="@(Context.Request.Query["sortColumn"] == "BuyerName")">Buyer Name</option>
                                    <option value="TotalBillPrice" selected="@(Context.Request.Query["sortColumn"] == "TotalBillPrice")">Amount</option>
                                    <option value="PaymentMethod" selected="@(Context.Request.Query["sortColumn"] == "PaymentMethod")">Payment Method</option>
                                </select>
                            </div>

                            <!-- Sort Direction -->
                            <div>
                                <label for="sortDirection" class="form-label text-muted small mb-1">Order</label>
                                <select id="sortDirection" name="sortDirection" class="form-select shadow-sm" style="border-radius: 6px;">
                                    <option value="asc" selected="@(Context.Request.Query["sortDirection"] == "asc")">Ascending</option>
                                    <option value="desc" selected="@(Context.Request.Query["sortDirection"] == "desc")">Descending</option>
                                </select>
                            </div>

                            <!-- Buttons -->
                            <div class="justify-content-center d-flex flex-column flex-sm-row align-items-stretch gap-2 ms-sm-auto">
                                <button type="submit" class="btn btn-primary px-4 shadow-sm w-100 w-sm-auto" style="border-radius: 6px;">
                                    <i class="bi bi-filter me-2"></i>Apply
                                </button>
                                <a href="@Url.Action("All_bills")" class="btn btn-outline-secondary shadow-sm w-100 w-sm-auto" style="border-radius: 6px;">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i>Reset
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Toggle Advanced Filters - Notice this comes BEFORE the filters section -->
                    <div class="d-flex justify-content-center border-top position-relative">
                        <button type="button" class="btn btn-link text-primary px-4 py-2" onclick="toggleAdvancedFilters()" aria-expanded="false" aria-controls="advancedFilters">
                            <span id="advancedFiltersText">Advanced Filters</span>
                            <i class="bi bi-chevron-down ms-1" id="advancedFiltersIcon"></i>
                        </button>
                    </div>

                    <!-- Advanced Filters Section -->
                    <div class="advanced-filters border-top p-3 bg-light rounded-bottom d-none"
                         id="advancedFilters">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">From Date</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white"><i class="bi bi-calendar3"></i></span>
                                    <input type="date" class="form-control" name="startDate" value="@Context.Request.Query["startDate"]">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">To Date</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white"><i class="bi bi-calendar3"></i></span>
                                    <input type="date" class="form-control" name="endDate" value="@Context.Request.Query["endDate"]">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">Min Amount</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white">₹</span>
                                    <input type="number" class="form-control" placeholder="Min" name="minAmount" value="@Context.Request.Query["minAmount"]">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-bold">Max Amount</label>
                                <div class="input-group shadow-sm">
                                    <span class="input-group-text bg-white">₹</span>
                                    <input type="number" class="form-control" placeholder="Max" name="maxAmount" value="@Context.Request.Query["maxAmount"]">
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <div class="bills-table-container mb-4 mt-4">
        <div class="card shadow-sm border-0">
            <!-- Table Header with Stats and Actions -->
            <div class="card-header bg-white p-2 border-bottom">
                <div class="justify-content-between align-items-center">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                        <!-- Left side with title and count -->
                        <div class="d-flex align-items-center gap-2">
                            <h5 class="text-nowrap mb-0 fw-semibold me-2">All Bills</h5>
                            <div class="badge rounded-pill bg-light text-primary border-primary px-2 py-1">
                                <span id="billCount">@(Model?.Bills.Count() ?? 0)</span> records
                            </div>

                            <!-- Records per page dropdown -->
                          
                        </div>
                        <!-- Right side with action buttons -->
                        <div class="d-flex align-items-center gap-2">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        type="button"
                                        id="pageSizeDropdown"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-list-ul me-1"></i><span id="currentPageSize">Context.Request.Query["pageSize"] ?? "10"</span> Records
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="pageSizeDropdown">
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(5)">5 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(10)">10 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(50)">50 Records</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(100)">100 Records</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="javascript:void(0)" onclick="changePageSize(0)">All Records</a></li>
                                </ul>
                            </div>
                            <!-- Export dropdown 
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        type="button"
                                        id="exportDropdown"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-download me-1"></i>Export
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="exportDropdown">
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-pdf me-1 text-danger"></i>PDF</a></li>
                                </ul>
                            </div>
                            -->
                            <!-- Refresh button -->
                            <button class="btn btn-sm btn-outline-secondary" id="refreshBtn" title="Refresh">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card border-0 shadow-sm">
                <div class="card-body p-0">
                    <div class="table-responsive" style="max-height: 560px; overflow-y: auto;">
                        <table class="table table-hover align-middle mb-0">

                            <thead class="sticky-top">
                                <tr class="bg-light border-bottom">
                                    <th width="50" class="text-center px-2 py-2">#</th>
                                    <th class="px-2 py-2">
                                        <a href="@Url.Action("All_bills", new {
                searchTerm = Context.Request.Query["searchTerm"],
                sortColumn = "BuyerName",
                sortDirection = Context.Request.Query["sortColumn"] == "BuyerName" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc",
                pageSize = Context.Request.Query["pageSize"]
            })" class="text-decoration-none text-dark d-flex align-items-center">
                                            <span class="">Buyer Name</span>
                                            <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "BuyerName"
                    ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                    : "bi-filter-left text-secondary opacity-50")"></i>
                                        </a>
                                    </th>
                                    <th class="px-2 py-2">
                                        <a href="@Url.Action("All_bills", new {
                searchTerm = Context.Request.Query["searchTerm"],
                sortColumn = "TotalBillPrice",
                pageSize = Context.Request.Query["pageSize"],
                sortDirection = Context.Request.Query["sortColumn"] == "TotalBillPrice" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
            })" class="text-decoration-none text-dark d-flex align-items-center ">
                                            <span class=" ">Amount</span>
                                            <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "TotalBillPrice"
                    ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                    : "bi-filter-left text-secondary opacity-50")"></i>
                                        </a>
                                    </th>
                                    <th class="px-2 py-2">
                                        <a href="@Url.Action("All_bills", new {
                searchTerm = Context.Request.Query["searchTerm"],
                sortColumn = "PaymentMethod",
                pageSize = Context.Request.Query["pageSize"],
                sortDirection = Context.Request.Query["sortColumn"] == "PaymentMethod" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
            })" class="text-decoration-none text-dark d-flex align-items-center">
                                            <span class="">Payment</span>
                                            <i class="bi ms-1 @(Context.Request.Query["sortColumn"] == "PaymentMethod"
                    ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                    : "bi-filter-left text-secondary opacity-50")"></i>
                                        </a>
                                    </th>
                                    <th class="px-2 py-2">
                                        <a href="@Url.Action("All_bills", new {
                searchTerm = Context.Request.Query["searchTerm"],
                pageSize = Context.Request.Query["pageSize"],
                sortColumn = "CreatedAt",
                sortDirection = Context.Request.Query["sortColumn"] == "CreatedAt" && Context.Request.Query["sortDirection"] == "asc" ? "desc" : "asc"
            })" class="text-decoration-none text-dark d-flex align-items-center ">
                                            <span class="">Date</span>
                                            <i class="bi ms-1  @(Context.Request.Query["sortColumn"] == "CreatedAt"
                    ? (Context.Request.Query["sortDirection"] == "asc" ? "bi-sort-up-alt text-primary" : "bi-sort-down-alt text-primary")
                    : "bi-filter-left text-secondary opacity-50")"></i>
                                        </a>
                                    </th>
                                    <th width="110" class="text-center px-2 py-2">
                                        <span class="">Actions</span>
                                    </th>
                                </tr>
                            </thead>

                            <tbody>
                                @if (Model != null && Model.Bills.Any())
                                {

                                    int bill_no = (Model.CurrentPage - 1) * Model.PageSize + 1;
                                    foreach (var bill in Model.Bills)
                                    {
                                        <tr class="bill-row border-bottom">
                                            <td class="text-center text-secondary">@bill_no</td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-circle bg-primary-subtle text-primary me-2" style="width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                                        @{
                                                            string initials = string.Join("", bill.BuyerName.Split(' ').Take(2).Select(n => n[0]));
                                                        }
                                                        <span>@initials</span>
                                                    </div>
                                                    <div>
                                                        <div class="fw-semibold">@bill.BuyerName</div>
                                                        <small class="text-secondary">ID: @bill.B_Id</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @{
                                                    string amountClass = bill.TotalBillPrice > 5000 ? "text-danger" :
                                                    bill.TotalBillPrice > 1000 ? "text-warning" : "text-success";
                                                }
                                                <span class="fw-semibold @amountClass">
                                                    @string.Format(new System.Globalization.CultureInfo("hi-IN"), "{0:C}", bill.TotalBillPrice)
                                                </span>
                                            </td>
                                            <td>
                                                @{
                                                    var method = bill.PaymentMethod.ToString().ToLower();
                                                    string badgeClass = method switch
                                                    {
                                                        "cash" => "bg-success-subtle text-success",
                                                        "credit card" => "bg-primary-subtle text-primary",
                                                        "debit card" => "bg-info-subtle text-info",
                                                        "upi" => "bg-warning-subtle text-warning",
                                                        _ => "bg-secondary-subtle text-secondary"
                                                    };

                                                    string icon = method switch
                                                    {
                                                        "cash" => "bi-cash",
                                                        "credit card" => "bi-credit-card",
                                                        "debit card" => "bi-credit-card",
                                                        "upi" => "bi-phone",
                                                        _ => "bi-wallet2"
                                                    };
                                                }
                                                <span class="badge rounded-pill @badgeClass px-2 py-1">
                                                    <i class="bi @icon me-1"></i>
                                                    @bill.PaymentMethod
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-calendar-date text-secondary me-1"></i>
                                                    <span>@bill.CreatedAt.ToString("MMM dd, yyyy")</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex justify-content-end gap-1">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            data-id="@bill.B_Id"
                                                            onclick="P_bill(this.dataset.id)"
                                                            title="Print Bill">
                                                        <i class="bi bi-printer"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning"
                                                            data-id="@bill.B_Id"
                                                            onclick="E_bill(this.dataset.id)"
                                                            title="Edit Bill">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </button>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                                type="button"
                                                                data-bs-toggle="dropdown"
                                                                aria-expanded="false"
                                                                title="More Actions">
                                                            <i class="bi bi-three-dots-vertical"></i>
                                                        </button>
                                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                                            <li>
                                                                <a class="dropdown-item text-danger" href="#" onclick="deletebill('@bill.B_Id')">
                                                                    <i class="bi bi-trash me-1"></i>Delete Bill
                                                                </a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        bill_no++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-center py-4">
                                            <div class="py-3">
                                                <i class="bi bi-receipt-cutoff fs-2 text-secondary mb-2 d-block"></i>
                                                <h6 class="mb-2">No Bills Found</h6>
                                                <p class="text-secondary mb-3">There are no bills matching your search criteria.</p>
                                                <button onclick="addbill()" class="btn btn-primary">
                                                    <i class="bi bi-plus-circle me-1"></i>Create New Bill
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Table Footer with Pagination -->
            <div class="card-footer bg-white py-1 d-flex justify-content-between align-items-center border-top">
                <div class="text-muted">
                    Showing <span class="fw-semibold">@(Model?.Bills.Count() ?? 0)</span> of <span class="fw-semibold">@(Model?.TotalItems ?? 0)</span> materials
                </div>

                @if (Model?.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-sm mb-0">
                            <!-- First Page -->
                            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                pageSize = Context.Request.Query["pageSize"],
                                page = 1
                            })" aria-label="First">
                                    <i class="bi bi-chevron-double-left"></i>
                                </a>
                            </li>

                            <!-- Previous Page -->
                            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                page = Model.CurrentPage - 1,
                                pageSize = Context.Request.Query["pageSize"]
                            })" aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>

                            <!-- Dynamic Page Numbers -->
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, startPage + 4);

                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("All_bills", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = i
                                })">@i</a>
                                </li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("All_bills", new {
                                    searchTerm = Context.Request.Query["searchTerm"],
                                    sortColumn = Context.Request.Query["sortColumn"],
                                    sortDirection = Context.Request.Query["sortDirection"],
                                    pageSize = Context.Request.Query["pageSize"],
                                    page = Model.TotalPages
                                })">@Model.TotalPages</a>
                                </li>
                            }
                            <!-- Next Page -->
                            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                pageSize = Context.Request.Query["pageSize"],
                                page = Model.CurrentPage + 1
                            })" aria-label="Next">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                            <!-- Last Page -->
                            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("All_bills", new {
                                searchTerm = Context.Request.Query["searchTerm"],
                                sortColumn = Context.Request.Query["sortColumn"],
                                sortDirection = Context.Request.Query["sortDirection"],
                                pageSize = Context.Request.Query["pageSize"],
                                page = Model.TotalPages
                            })" aria-label="Last">
                                    <i class="bi bi-chevron-double-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal" id="addCutomerBillModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-lg rounded-4 border-0">
            <!-- Modal Header -->
            <div class="modal-header  text-white position-relative py-4" style="background:var(--primary-dark)">
                <div class="w-100 text-center">
                    <h5 class="modal-title fw-bold d-flex align-items-center justify-content-center">
                        <i class="bi bi-receipt-cutoff me-2 fs-2"></i>
                        <span class="fs-3">Create New Customer Invoice</span>
                    </h5>
                </div>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3 top-50 translate-middle-y"
                        data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body p-3">
                    <form id="customerBillForm" class="needs-validation" novalidate method="post">
                        <div class="row g-3">

                        <!-- Customer Information Row -->
                        <div class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-icon align-content-center"><i class="bi bi-person"></i></span>
                        <input type="text" class="form-control ms-2" id="CustomerName" name="CustomerName" placeholder="Supplier Name" required>
                         <div id="nameSuggestions" class="suggestions-dropdown" style="margin-top:42px; margin-left:24px"></div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="input-group">
                                    <span class="input-icon align-content-center"><i class="bi bi-telephone"></i></span>
                        <input type="tel" class="form-control ms-2" id="phoneNumber" name="PhoneNumber" placeholder="Phone Number" readonly>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="input-group">
                                    <span class="input-icon align-content-center"><i class="bi bi-geo-alt"></i></span>
                        <input type="text" class="form-control ms-2" id="CustomerAddress" name="CustomerAddress" placeholder="Customer Address" readonly>
                    </div>
                </div>
            </div>
            
                        <!-- Invoice Details Row -->
                        <div class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                                    <span class="input-icon align-content-center">Bill Date </span>
                        <input type="date" class="form-control ms-2" id="invoiceDate" name="InvoiceDate" required>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="input-group">
                                    <span class="input-icon align-content-center"><i class="bi bi-upc-scan"></i></span>
                        <input type="text" class="form-control ms-2" id="CustomerGSTIN" name="CustomerGSTIN" placeholder="Customer GSTIN (if available)">
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="input-group">
                                    <span class="input-icon align-content-center"><i class="bi bi-geo"></i></span>
                        <select class="form-select ms-2" id="PlaceOfSupply" name="PlaceOfSupply" required>
                            <option value="">Place of Supply</option>
                            <option value="Gujarat">Gujarat</option>
                            <option value="Maharashtra">Maharashtra</option>
                            <option value="Delhi">Delhi</option>
                            <option value="Rajasthan">Rajasthan</option>
                        </select>
                    </div>
                </div>
            </div>

                         <!-- Materials Section -->
                        <div class="col-12">
                            <div class="card border-0 shadow-sm hover-shadow rounded-4" id="itemContainer">
                                <div class="card-header bg-light border-0 py-3 rounded-top-4">
                                    <h5 class="fw-semibold text-primary mb-0 d-flex align-items-center">
                                        <i class="bi bi-pallet me-2 fs-5"></i>Stock Items
                                    </h5>
                                </div>
                                <div class="card-body p-3">
                                    <div id="materialsContainer">
                                        <!-- Material items will be added here -->
                                    </div>
                                    <button type="button"
                                            class="btn btn-outline-primary w-100 mt-3 py-3 rounded-3 add-material-btn"
                                            id="addMaterialBtn">
                                        <i class="bi bi-plus-circle me-2"></i>Add Item
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Total Amount -->
                         <div class="d-flex p-2">
                                 <h5 class="fw-bold text-secondary mb-0 d-flex align-items-center">
                                        <i class="bi bi-receipt-cutoff me-2 fs-4"></i> Subtotal
                                </h5>
                                <h3 id="totalAmount" class="text-success fw-bold mb-0 ms-2 d-flex align-items-center">
                                    <span class="fs-4">₹</span><span id="totalValue">0.00</span>
                                </h3>
                            </div>

                        <div class="form-check form-switch mb-2 ms-2">
                            <input class="form-check-input" type="checkbox" id="gstToggle">
                            <label class="form-check-label fw-semibold text-secondary" for="gstToggle" id="gstLabel">Add GST</label>
                        </div>

                        <div class="row">

                            <div class="row tax-section d-none">

                                <!-- CGST Input -->
                                <div class="col-md-4 mb-2">
                                    <div class="input-group">
                                        <span class="input-icon align-content-center">CGST (%)</span>
                                        <input type="number" class="form-control ms-2 shadow-sm" id="cgstPercent" placeholder="CGST (%)" min="0">
                                    </div>
                                </div>

                                <!-- SGST Input -->
                                <div class="col-md-4 mb-2">
                                    <div class="input-group">
                                        <span class="input-icon align-content-center">SGST (%)</span>
                                        <input type="number" class="form-control ms-2 shadow-sm" id="sgstPercent" placeholder="SGST (%)" min="0">
                                    </div>
                                </div>

                                <!-- IGST Input-->
                                <div class="col-md-4 mb-2">
                                    <div class="input-group">
                                        <span class="input-icon align-content-center">IGST (%)</span>
                                        <input type="number" class="form-control ms-2 shadow-sm" id="igstPercent" placeholder="IGST (%)" min="0">
                                    </div>
                                </div>


                            <div class="row g-2 tax-section d-none">

                                <!-- Total GST (%) Field -->
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-icon align-content-center">GST(%)</span>
                                        <input type="number" class="form-control ms-2 shadow-sm bg-light" id="totalGstPercent" placeholder="Total GST (%)" readonly>
                                    </div>
                                </div>

                                <!-- Amount of Tax Field -->
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-icon align-content-center">Tax Amount (₹)</span>
                                        <input type="text" class="form-control ms-2 shadow-sm bg-light" id="gstAmount" placeholder="Total GST Amount" readonly>
                                    </div>
                                </div>

                                <!-- HSN Code Field -->
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-icon align-content-center">HSN Code</span>
                                        <input type="text" class="form-control ms-2 shadow-sm bg-light" id="hsnCode" value="3915" readonly>
                                    </div>
                                </div>

                            </div>


                        </div>
                        <!-- Total Amount With GST -->
                        <div class="col-12 mt-2 d-none" id="totalWithGstContainer">
                            <div class="d-flex p-2 ">
                                <h5 class="fw-bold text-secondary mb-0 d-flex align-items-center">
                                    <i class="bi bi-receipt-cutoff me-2 fs-4"></i> Total Invoice Value (With GST)
                                </h5>
                                <h3 id="totalAmountWithGst" class="text-success fw-bold mb-0 ms-2 d-flex align-items-center">
                                    <span class="fs-4">₹</span><span id="totalWithGstValue">0.00</span>
                                </h3>
                            </div>
                        </div>
                        </div>

                        <!-- Payment Method -->
                        <div class="col-md-3">
                            <div class="input-group">
                                <span class="input-icon align-content-center"><i class="bi bi-credit-card-2-back"></i></span>
                                <select class="form-select ms-2 shadow-sm" id="paymentMethod" name="PaymentMethod" required>
                                    <option value=0>💰 Cash</option>
                                    <option value=1>💳 Check</option>
                                    <option value=2>🏦 Bank Transfer</option>
                                </select>
                            </div>
                        </div>

                        <!-- Due Date -->
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-icon align-content-center">Due Date</span>
                                <input type="date" class="form-control ms-2 shadow-sm" id="dueDate" name="DueDate" required>
                            </div>
                        </div>

                        <!-- Mark as Paid Checkbox -->
                        <div class="col-md-4">
                            <div class="input-group bg-light rounded-4 border shadow-sm p-2 align-items-center">
                                <input class="form-check-input mt-0" type="checkbox" id="isPaid" name="IsPaid" required>
                                <label class="form-check-label ms-2 fw-semibold" for="isPaid">
                                    <i class="bi bi-receipt me-1"></i>Mark as Paid
                                </label>
                                <div class="invalid-feedback ms-3" style="max-width: 40%;">
                                    Please confirm payment status
                                </div>
                            </div>
                        </div>


                    </div>
                    <!-- Modal Footer -->
                    <div class="mt-4 px-0 pb-0">
                        <div class="w-100 d-flex justify-content-between border-top pt-4">
                            <button type="button"
                                    class="btn btn-lg btn-outline-secondary rounded-pill px-4 shadow-sm d-flex align-items-center"
                                    data-bs-dismiss="modal">
                                <i class="bi bi-x-lg me-2"></i>Cancel
                            </button>
                            <button type="submit"
                                    id="createInvoiceBtn"
                                    class="btn btn-lg btn-primary rounded-pill px-4 shadow-sm d-flex align-items-center"
                                    disabled>
                                <i class="bi bi-file-earmark-check me-2"></i>Create Invoice
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts{
<script>
       const availablestocks = [];

       document.addEventListener("DOMContentLoaded",function(){

       document.getElementById("cutomer-invoice").addEventListener("click",function()
        {
                
                 const params = new URLSearchParams({

                         searchTerm: '',
                         sortColumn: 'ColorName',
                         sortDirection: 'asc',
                         page: '1',
                         pageSize: '9999'
                     });

               $.ajax({
                                url: `@Url.Action("GetAll_availableStocks", "Stock_Management_")?`+ params.toString(),
                        type: "GET",
                        success: function(response) {
                            if ( response.success) {

                                            availablestocks.length = 0;
                                            Object.entries(response.message.stock).forEach(([key,stock])=>{
                                                       availablestocks.push({
                                                               id : stock.stockId,
                                                               colorName : stock.colorName,
                                                               availablestocks : stock.availableStock,
                                                               price : stock.price,
                                                               weight_per_bag : stock.weight
                                                       });

                                        });

                                      
                            } else {
                                console.error("No data received");
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error("AJAX error:", error);
                        }
                    });

                 const modal =  new bootstrap.Modal(document.getElementById('addCutomerBillModal'));
                 const form = document.getElementById('customerBillForm');
                 if (form)
                      {
                  const inputs = form.querySelectorAll('.is-valid, .is-invalid');
                  inputs.forEach(input => {
                  input.classList.remove('is-valid', 'is-invalid');
                    });

                 // Optional: remove feedback text if needed
                 const feedbacks = form.querySelectorAll('.valid-feedback, .invalid-feedback');
                 feedbacks.forEach(fb => {
                  fb.style.display = 'none'; // or hide it with ``
                 fb.classList.remove('valid-feedback', 'invalid-feedback');
                   });

                          form.reset(); 
                 }

            modal.show();

        });

       const customer = [];

       document.getElementById("CustomerName").addEventListener("keyup",function(input)
             {
               const value = input.target.value;
               document.getElementById('phoneNumber').value = "";
               applyValidation('CustomerName', false);
               applyValidation('phoneNumber', false);

                                        if (value.length <= 0 || /\d/.test(value))
                                {
                            nameSuggestions.style.display = 'none';
                           return;
                         }
                         
         
               if(value)
               {
                       fetch(`/Party/getByNameCustomerName?name=${encodeURIComponent(value)}`, 
                       {
                       method: 'GET',
                       headers: 
                         {
                            'Content-Type': 'application/json'
                          }
                        })
                       .then(response => response.json())
                       .then(response =>{
                            customer.length = 0;
                            Object.entries(response.data).forEach(([key,value]) => customer.push({name: key,
                            phone: parseInt(value)
                        })
                       )
                             const nameSuggestions = document.getElementById('nameSuggestions');
                            
                            displayCustomerSuggestions(customer, nameSuggestions);
                       })
                       .catch(error => 
                          {
                                 console.error('Error:', error);
                          });

                                  function  displayCustomerSuggestions(data,nameSuggestions)
                                    {
                                           nameSuggestions.innerHTML = '';
                                           data.forEach(cus => {
                                           const suggestionItem = document.createElement('div');
                                           suggestionItem.className = 'suggestion-item';
                                           suggestionItem.innerHTML = `
                                            <div class="suggestion-name">${cus.name}</div>
                                            <div class="suggestion-phone">${cus.phone}</div>`;
                                             nameSuggestions.appendChild(suggestionItem);

                                   suggestionItem.addEventListener('click', () => {

                                  const input = document.getElementById('CustomerName');

                                  applyValidation('CustomerName',true);
                                

                                  input.value =  cus.name;
                                  input.classList.remove('is-invalid');
                                  input.classList.add('is-valid');
                                  input.style.display = 'block';
                               
                                  const phoneInput = document.getElementById('phoneNumber');
                                   applyValidation('phoneNumber',true);
                                  phoneInput.value  = cus.phone;
                                  phoneInput.classList.remove('is-invalid');
                                  phoneInput.classList.add('is-valid');
                                 
                                  nameSuggestions.style.display = 'none';
                                 });
                                 });

                                  nameSuggestions.style.display = 'block';
                                  }
                              }
             });

       document.getElementById('addMaterialBtn').addEventListener("click", function() {
            const materialsContainer = document.getElementById('materialsContainer');
                              const itemCount = materialsContainer.querySelectorAll('.material-row').length + 1;

                 const newItem = `
                  <div class="material-row justify-content-between" id="item-${itemCount}">
          <!-- Item Number -->
          <div class="item-number">
            <div class="number-display">${itemCount}</div>
          </div>

          <!-- Item Selector -->
          <div class="item-cell item-selector mb-4">
            <div class="cell-label fw-semibold text-secondary">
              <i class="bi bi-box-seam me-1"></i> Item
            </div>
            <div class="select-container">
              <select class="item-dropdown" id="dropdown-${itemCount}" required>
                <option value="">Select item...</option>
              </select>
            </div>
          </div>

          <!-- Price per Kg -->
          <div class="item-cell">
            <div class="cell-label fw-semibold text-secondary">
              <i class="bi bi-currency-rupee me-1"></i> Rupees/kg
            </div>
            <div class="input-container">
              <span class="price-prefix">₹</span>
              <input type="text" class="price-input" type="number" min="0" required>
              <span class="check-icon" style="display:none;">
                <!-- Check Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
                </svg>
              </span>
            </div>
            <div class="calc-preview" id="PriceperKgPreview"> = 0 Price/Kg</div>
          </div>

          <!-- Weight per Bag -->
          <div class="item-cell">
            <div class="cell-label fw-semibold text-secondary">
              <i class="bi bi-scale me-1"></i> Weight/bag
            </div>
            <div class="input-container">
              <input type="text" class="weight-per-bag-input input-with-unit calc-trigger" placeholder="0" min="0" type="number" required>
              <span class="unit-suffix">kg</span>
            </div>
            <div class="calc-preview" id="WeightperBagPreview"> = 0 Weight/Bag</div>
          </div>

          <!-- Total Bags -->
          <div class="item-cell">
            <div class="cell-label fw-semibold text-secondary">
              <i class="bi bi-bag me-1"></i> Bags
            </div>
            <div class="input-container">
              <input type="text" class="total-bags-input calc-trigger" placeholder="0" type="number" min="0" required>
              <span class="unit-suffix">
                <!-- Bag Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5z"/>
                </svg>
              </span>
            </div>
            <div class="calc-preview" id="TotalBagsPreview"> = 0 Bags</div>
          </div>

          <!-- Additional Weight -->
          <div class="item-cell">
            <div class="cell-label fw-semibold text-secondary">
              <i class="bi bi-plus-circle me-1"></i> Extra
            </div>
            <div class="input-container">
              <input type="text" class="additional-weight-input input-with-unit calc-trigger" placeholder="0" min="0"type="number">
              <span class="unit-suffix">+kg</span>
            </div>
            <div class="calc-preview" id="AdditionalWeightPreview"> = 0 Additional weight</div>
          </div>

          <!-- Total Weight -->
          <div class="mb-4">
            <div class="cell-label fw-semibold text-secondary">
                   <i class="bi bi-calculator me-1"></i> Total Wt (kg)
            </div>
            <div class="input-container">
              <input type="text" class="total-weight-input input-with-unit calc-trigger" placeholder="0" type="text" readonly>
            </div>
          </div>

          <!-- Total Price -->
          <div class="price-cell calc-preview">
            <span class="total-price fw-semibold text-success" readonly>₹0.00</span>
          </div>

          <!-- Delete Button -->
          <button type="button" class="delete-btn delete-item-btn" title="Delete Item">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
              <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
            </svg>
          </button>
        </div>
        `;

                materialsContainer.insertAdjacentHTML("beforeend", newItem);

        // Wait for DOM to update before querying new elements
        setTimeout(() => {
          const lastItem = materialsContainer.lastElementChild;
          const dropdown = lastItem.querySelector('.item-dropdown');

          dropdown.innerHTML = '';

          const defaultOption = document.createElement('option');
          defaultOption.value = '';
          defaultOption.textContent = 'Select a stock';
          dropdown.appendChild(defaultOption);
          availablestocks.forEach(stock => {
            const option = document.createElement('option');
            option.value = stock.id;
            option.textContent = `${stock.colorName} - ${stock.availablestocks.toFixed(2)} Kg (available)`;
            option.setAttribute('data-price', stock.price);
             option.setAttribute('data-weightperbag',stock.weight_per_bag);
            dropdown.appendChild(option);
          });
              
             dropdown.addEventListener("change",function()
                           {
                               const selectedOption = this.options[this.selectedIndex];
                               const selectedText = selectedOption.textContent;
                               const price = selectedOption.getAttribute('data-price');
                               
                             
                               const weightperpag = selectedOption.getAttribute('data-weightperbag');
                               
                               const row = this.closest('.material-row');

                                 
                               const stockprice = row.querySelector('.price-input');
                               const weight_Per_bag = row.querySelector('.weight-per-bag-input');


                               const isSelected = !!selectedOption.value;

                               stockprice.value = isSelected ? price : 0;
                               weight_Per_bag.value = weightperpag;

                               stockprice.classList.toggle('is-valid', isSelected);
                               stockprice.classList.toggle('is-invalid', !isSelected);

                               weight_Per_bag.classList.remove('is-valid', 'is-invalid');

                               calculateLineTotal(row);
                               updateTotalAmount();
                                          updateTotalWithGST();
                            });
        }, 0);

       document.getElementById('materialsContainer').addEventListener('click', function(e) {
                     if (e.target.closest('.delete-btn')) {
                           const row = e.target.closest('.material-row');
                           if (row) {
                               row.remove();
                               updateTotalAmount();
                               updateItemNumbers();
                                          updateTotalWithGST();
                            }
                        }
        });
 
                });
                 
       document.addEventListener("click", function (event) {
             const nameSuggestions = document.getElementById('nameSuggestions');
               if (!nameSuggestions.contains(event.target)) {
                    nameSuggestions.style.display = "none";
                    }
        });

       document.getElementById('materialsContainer').addEventListener('input', function (e) {

                  const target = e.target;

                  if (target.classList.contains('calc-trigger') || target.classList.contains('price-input')) {
                    const row = target.closest('.material-row');

                    calculateLineTotal(row);
                    updateTotalAmount();
                         updateTotalWithGST();
                  }
                });
   });

              function applyValidation(inputId, showValid = false) {
             const input = document.getElementById(inputId);
            input.classList.add('is-invalid');

            const icon = input.nextElementSibling;
            const feedback = icon?.nextElementSibling;

            if (feedback)
            {
                feedback.classList.add('valid-feedback');
                feedback.style.display = showValid ? 'block' : 'none';
            }

        }
            
              function safeEval(expression) {
                  try {
                    const sanitized = expression.replace(/[^-()\d/*+.]/g, '');
                    const result =  eval(sanitized);
                    return result < 0 || isNaN(result) ? 0 : result;
                  } catch (e) {
                    return 0;
                  }
                }

              function applyValidationStyles(input, isValid) {
                  input.classList.remove('is-invalid', 'is-valid');
                  input.classList.add(isValid ? 'is-valid' : 'is-invalid');
                }

              function calculateLineTotal(row) {
                  
                  const priceInput = row.querySelector('.price-input');
                  const weightPerBagInput = row.querySelector('.weight-per-bag-input');
                  const totalBagsInput = row.querySelector('.total-bags-input');
                  const additionalWeightInput = row.querySelector('.additional-weight-input');
                  const totalWeightInput = row.querySelector('.total-weight-input');
                       



                  const price = safeEval(priceInput.value || "0");
                  const weightPerBag = safeEval(weightPerBagInput.value || "0");
                  const totalBags = safeEval(totalBagsInput.value || "0");
                  const additionalWeight = safeEval(additionalWeightInput.value || "0");

                  // Apply validation styles (non-zero, valid numbers)
                  applyValidationStyles(priceInput, price > 0);
                  applyValidationStyles(weightPerBagInput, weightPerBag > 0);
                  applyValidationStyles(totalBagsInput, totalBags > 0);
                  applyValidationStyles(additionalWeightInput, additionalWeight >= 0);

                  // Update previews
                  row.querySelector('#PriceperKgPreview').textContent = `= ${price} Rupees/Kg`;
                  row.querySelector('#WeightperBagPreview').textContent = `= ${weightPerBag} Weight/Bag`;
                  row.querySelector('#TotalBagsPreview').textContent = `= ${totalBags} Bags`;
                  row.querySelector('#AdditionalWeightPreview').textContent = `= ${additionalWeight} Additional weight`;

                  const totalWeight = (weightPerBag * totalBags) + additionalWeight;

                  const totalPrice = totalWeight * price;

                  totalWeightInput.value = `${totalWeight.toFixed(2)} = (${weightPerBag}*${totalBags})+ ${additionalWeight}`;

                  row.querySelector('.total-price').textContent = `₹${totalPrice.toFixed(2)}`;

                  return totalPrice;
                }

              function updateTotalAmount() {
                  const rows = document.querySelectorAll('.material-row');
                  let grandTotal = 0;

                  rows.forEach(row => {
                    grandTotal += calculateLineTotal(row);
                  });

                  document.getElementById('totalValue').textContent = grandTotal.toFixed(2);
                       
                   }

              function updateItemNumbers() {
                    const rows = document.querySelectorAll('.material-row');
                    rows.forEach((row, index) => {
                    const itemNumberCell = row.querySelector('.item-number');
                    itemNumberCell.textContent = index + 1;
                    row.id = `item-${index + 1}`;
                    const dropdown = row.querySelector('.item-dropdown');
                    if (dropdown) dropdown.id = `dropdown-${index + 1}`;
                  });
                }

          document.getElementById('gstToggle').addEventListener('change', function () {
          const taxFields = document.querySelectorAll('.tax-section');
          const container = document.getElementById("totalWithGstContainer");
          const isChecked = this.checked;

          // Show/hide tax input fields and container
          taxFields.forEach(el => el.classList.toggle('d-none', !isChecked));
          container.classList.toggle('d-none', !isChecked);

          // Update label text
          const setValue = (id, value) => document.getElementById(id).value = value;
          const setText = (id, text) => document.getElementById(id).textContent = text;

          if (isChecked) {
            setText("gstLabel", "Remove GST");
            // Optionally: Calculate GST here
          } else {
            setText("gstLabel", "Add GST");
            setText("totalWithGstValue", "0.00");

            // Reset GST input values
            ["cgstPercent", "sgstPercent", "igstPercent", "totalGstPercent","gstAmount"].forEach(id => setValue(id, 0));
          }
        });


                ['cgstPercent', 'sgstPercent', 'igstPercent'].forEach(id => {
                  document.getElementById(id).addEventListener('input', updateTotalWithGST);
            });


    function updateTotalWithGST() {

          const getNumericValue = id => parseFloat(document.getElementById(id)?.value || document.getElementById(id)?.textContent || 0) || 0;

        const cgst = getNumericValue("cgstPercent");
        const sgst = getNumericValue("sgstPercent");
        const igst = getNumericValue("igstPercent");
        const baseTotal = getNumericValue("totalValue");
        const totalgst = getNumericValue("totalGstPercent");
        const totalGstPercent = cgst + sgst + igst;

        document.getElementById("totalGstPercent").value = totalGstPercent;

        const gstAmount = (baseTotal * totalGstPercent) / 100;

        const totalWithGst = baseTotal + gstAmount;

        document.getElementById("gstAmount").value = gstAmount;

         document.getElementById("totalWithGstValue").textContent = totalWithGst.toFixed(2);

    }
</script>
  
}
 <style>
    .suggestions-dropdown {
        position: absolute;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        background-color: white;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        z-index: 1000;
        display: none;
        margin-top: 2px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .suggestion-item {
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f0f0f0;
    }

        .suggestion-item:hover {
            background-color: #f8f9fa;
        }

    .suggestion-name {
        font-weight: 600;
    }

    .suggestion-phone {
        font-size: 0.85rem;
        color: #6c757d;
    }

    @@media (min-width: 992px) {
        .small-on-lg {
            font-size: 0.95rem;
        }
    }
</style>

<style>
    .form-floating > .form-control,
.form-floating > .form-select {
    height: calc(3.5rem + 2px);
    padding: 1rem 0.75rem;
}

.form-floating > label {
    padding: 1rem 0.75rem;
}

.form-floating > .form-control:focus ~ label,
.form-floating > .form-control:not(:placeholder-shown) ~ label,
.form-floating > .form-select ~ label {
    opacity: 0.65;
    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
}

/* Ensuring icons stay aligned with text in labels */
.form-floating > label i {
    vertical-align: middle;
}

    /* Clean, minimal styling to match your screenshot */
    .material-row {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 8px;
        padding: 12px;
        margin-bottom: 8px;
        border-radius: 8px;
        background-color: #eef5ff;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }

    .item-number {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height:28px;
        border-radius: 50%;
        background-color: #3366ff;
        color: white;
        font-weight: 500;
        font-size: 14px;
        flex-shrink: 0;
    }

    .item-cell {
        display: flex;
        flex-direction: column;
        width: 170px !important;
        position:static !important;
    }

    .item-selector {
        flex: 1;
        min-width: 150px;
    }

    .cell-label {
        font-size: 11px;
        color: #6c757d;
        margin-bottom: 2px;
    }

    /* Clean form controls */
    .select-container {
        position: relative;
        width: 100%;
    }

        .select-container select {
            width: 100%;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 14px;
            appearance: none;
            background-color: white;
        }

        .select-container:after {
            content: "";
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #6c757d;
            pointer-events: none;
        }

    .input-container {
        position: relative;
        display: flex;
        align-items: center;
    }

        .input-container input {
            width: 100%;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 14px;
            background-color: white;
        }

    .price-prefix {
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    .price-input {
        padding-left: 20px !important;
    }

    .unit-suffix {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-size: 12px;
    }

    .input-with-unit {
        padding-right: 25px !important;
    }

    /* Price cell */
    .price-cell {
        width: 120px;
        background-color: #ffffff;
        border-radius: 4px;
        padding: 6px 12px;
        height: 32px;
        font-weight: 500;
        color: #3366ff;
        min-width: 80px;
    }

    /* Delete button */
    .delete-btn {
        background: none;
        border: none;
        color: #dc3545;
        cursor: pointer;
        padding: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        height: 32px;
    }

        .delete-btn:hover {
            background-color: #f8d7da;
        }

    /* Checked icon */
    .check-icon {
        color: #28a745;
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .material-row

    {
        flex-wrap: wrap;
       
    
    }

    .item-selector {
        flex: 1 0 calc(100% - 80px);
    }

  
    .price-cell {
        margin-left: auto;
    }

        .item-cell {
            display: flex;
            flex-direction: column;
            width: 100% !important;
            position: static !important;
        }

    }

    /* Validation styles */
    .is-invalid {
        border-color: var(--error) !important;
        background-color: #ffe6e6;
    }

    .is-valid {
        border-color: var(--success) !important;
    }

    .total-weight-input
    {
       width: 138px !important;
    
    }

    .calc-preview {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .subtotal-card {
        background-color: var(--light-bg);
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .tax-section {
        min-width: 130px;
        margin: 0.5rem;
    }

        .tax-section .form-floating {
            height: 100%;
        }

        .tax-section .form-control {
            height: 42px;
            border-radius: 8px;
        }

        .tax-section .form-floating > label {
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
        }

        .tax-section .form-floating > .form-control {
            padding: 0.5rem 0.75rem;
        }

            /* Fixed floating label positioning */
            .tax-section .form-floating > .form-control:focus ~ label,
            .tax-section .form-floating > .form-control:not(:placeholder-shown) ~ label {
                transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
                opacity: 0.65;
            }

    /* Toggle button styling */
    #toggleTax {
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
    }

</style>
